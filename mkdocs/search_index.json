{
    "docs": [
        {
            "location": "/", 
            "text": "Waffles\n\n\nWaffles is a simple configuration management system written in Bash. It aims to be lightweight and easy to use, enabling you to focus on the environments you're creating rather than the configuration management system itself.", 
            "title": "Home"
        }, 
        {
            "location": "/#waffles", 
            "text": "Waffles is a simple configuration management system written in Bash. It aims to be lightweight and easy to use, enabling you to focus on the environments you're creating rather than the configuration management system itself.", 
            "title": "Waffles"
        }, 
        {
            "location": "/about/", 
            "text": "About Waffles\n\n\nWhy Another Configuration Management System?\n\n\nOver the years I've seen configuration management systems grow to become very large and complex projects. It's not uncommon for configuration management systems to have complex dependencies and require large all-in-one installations because manual installation would be just too difficult. I find this extremely ironic.\n\n\nWaffles is my attempt to create a simple, lightweight configuration management system. It doesn't have all of the features that Puppet, Chef, Ansible, or others have, but it can still do a lot.\n\n\nWaffles is very small and its core only uses Bash 4.3. rsync is required for push-based deployments.\n\n\nI also chose to make heavy use of \nAugeas\n. Augeas, in my opinion, is a very underutilized tool. You can easily run Waffles without Augeas, but Augeas makes handling certain situations much easier.\n\n\nWhy Bash?\n\n\nThe main reasons why I chose Bash over another language such as Python, Ruby, Golang, etc are:\n\n\n\n\nBash is available on every Linux distribution out of the box. It's easy to install on FreeBSD and similar nix systems.\n\n\nConfiguring a nix-based system is all about running commands in a sequence as well as editing text files. This is exactly what Bash and the standard suite of unix utilities do. And they do this very well.\n\n\nSome configuration management systems just create Bash subprocesses to perform the underlying system changes.\n\n\n\n\nThere are, of course, downsides to using Bash:\n\n\n\n\nIt's hard to parse YAML, JSON, etc in Bash.\n\n\nBash's data structures (arrays, hashes) can be weird.\n\n\nIt's hard to run on Windows.\n\n\n\n\nI will be investigating these issues as time goes on and hopefully be able to find solutions. Until then, though, it is of my opinion that the outlined advantages outweigh the immediate disadvantages for use in Linux-based environments.\n\n\nWhy \"Waffles\"?\n\n\nI had all sorts of names for this project. \"Composite\" was the longest running name, but I always felt it was kind of boring. \nHecubus\n was another front-runner. I eventually settled on \"Waffles\" because I wanted a name that was simple and wasn't too serious. And it's one of the first words I hear every morning when my son asks \"wa-foos?\".\n\n\nFuture Plans\n\n\nWaffles is still new. Although it can do quite a bit, there are some key features that I would like to see added:\n\n\n\n\nShared Data: I'd like an easy way for nodes to be able to share information between each other, whether this feature is built into Waffles natively or uses an existing system like Consul.\n\n\nPull-based Deployment: Push-based deployment requires direct access to the node. This isn't always possible in public cloud environments. A pull-based approach would only require the Waffles server to be accessible publicly.\n\n\n\n\nContributing\n\n\nAll kinds of contributions are welcome:\n\n\n\n\nMore docs\n\n\nMore resources\n\n\nBetter ways of accomplishing something\n\n\n\n\nI'm by no means an expert programmer or Bash genius. I've learned a lot while making Waffles and still feel I have a long way to go. If you're also not a Bash expert, don't let that deter you from contributing -- we'll learn together. If you are an expert, feel free to fix poor style.", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-waffles", 
            "text": "", 
            "title": "About Waffles"
        }, 
        {
            "location": "/about/#why-another-configuration-management-system", 
            "text": "Over the years I've seen configuration management systems grow to become very large and complex projects. It's not uncommon for configuration management systems to have complex dependencies and require large all-in-one installations because manual installation would be just too difficult. I find this extremely ironic.  Waffles is my attempt to create a simple, lightweight configuration management system. It doesn't have all of the features that Puppet, Chef, Ansible, or others have, but it can still do a lot.  Waffles is very small and its core only uses Bash 4.3. rsync is required for push-based deployments.  I also chose to make heavy use of  Augeas . Augeas, in my opinion, is a very underutilized tool. You can easily run Waffles without Augeas, but Augeas makes handling certain situations much easier.", 
            "title": "Why Another Configuration Management System?"
        }, 
        {
            "location": "/about/#why-bash", 
            "text": "The main reasons why I chose Bash over another language such as Python, Ruby, Golang, etc are:   Bash is available on every Linux distribution out of the box. It's easy to install on FreeBSD and similar nix systems.  Configuring a nix-based system is all about running commands in a sequence as well as editing text files. This is exactly what Bash and the standard suite of unix utilities do. And they do this very well.  Some configuration management systems just create Bash subprocesses to perform the underlying system changes.   There are, of course, downsides to using Bash:   It's hard to parse YAML, JSON, etc in Bash.  Bash's data structures (arrays, hashes) can be weird.  It's hard to run on Windows.   I will be investigating these issues as time goes on and hopefully be able to find solutions. Until then, though, it is of my opinion that the outlined advantages outweigh the immediate disadvantages for use in Linux-based environments.", 
            "title": "Why Bash?"
        }, 
        {
            "location": "/about/#why-waffles", 
            "text": "I had all sorts of names for this project. \"Composite\" was the longest running name, but I always felt it was kind of boring.  Hecubus  was another front-runner. I eventually settled on \"Waffles\" because I wanted a name that was simple and wasn't too serious. And it's one of the first words I hear every morning when my son asks \"wa-foos?\".", 
            "title": "Why \"Waffles\"?"
        }, 
        {
            "location": "/about/#future-plans", 
            "text": "Waffles is still new. Although it can do quite a bit, there are some key features that I would like to see added:   Shared Data: I'd like an easy way for nodes to be able to share information between each other, whether this feature is built into Waffles natively or uses an existing system like Consul.  Pull-based Deployment: Push-based deployment requires direct access to the node. This isn't always possible in public cloud environments. A pull-based approach would only require the Waffles server to be accessible publicly.", 
            "title": "Future Plans"
        }, 
        {
            "location": "/about/#contributing", 
            "text": "All kinds of contributions are welcome:   More docs  More resources  Better ways of accomplishing something   I'm by no means an expert programmer or Bash genius. I've learned a lot while making Waffles and still feel I have a long way to go. If you're also not a Bash expert, don't let that deter you from contributing -- we'll learn together. If you are an expert, feel free to fix poor style.", 
            "title": "Contributing"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Waffles\n\n\nIntroduction\n\n\nWaffles is a lightweight configuration management system written in bash, simiar to other tools such as Puppet, Chef, or Ansible.\n\n\nQuickstart\n\n\nIf you just want to get up and running with Waffles, follow these steps:\n\n\n\n\nClone the waffles repository:\n\n\n\n\n$ git clone https://github.com/jtopjian/waffles .waffles\n\n\n\n\n\n\n\n\nReview the \nwaffles.conf\n file and make any appropriate changes.\n\n\n\n\n\n\nCreate \n/root/.waffles/site/roles/memcached.sh\n with the following contents:\n\n\n\n\n\n\nstdlib.data memcached\nstdlib.profile memcached/server\n\n\n\n\n\n\nCreate \nsite/data/memcached.sh\n with the following contents:\n\n\n\n\ndata_memcached_server_listen=\n0.0.0.0\n\n\n\n\n\n\n\nCreate \nsite/profiles/memcached/scripts/server.sh\n with the following contents:\n\n\n\n\nstdlib.title profiles/memcached\n\n# Install memcached\nstdlib.apt --package memcached --version latest\n\n# Set the listen option\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line \n-l $data_memcached_server_listen\n --match \n^-l\n\n\n# Manage the memcached service\nstdlib.sysvinit --name memcached\n\n# Restart memcached if anything changed\nif [[ $stdlib_state_change == true ]]; then\n  /etc/init.d/memcached restart\nfi\n\n\n\n\n\n\nInstall \nmemcached\n on the current node you're on by running:\n\n\n\n\n$ waffles.sh -r memcached\n\n\n\n\nThe end result will be a simple \nmemcached\n server.\n\n\nIf you'd prefer to provision a remote node with \nmemcached\n, do the following:\n\n\n$ waffles.sh -s memcached.example.com -r memcached\n\n\n\n\nThis assumes you have SSH and rsync access to \nmemcached.example.com\n.", 
            "title": "Quickstart"
        }, 
        {
            "location": "/quickstart/#waffles", 
            "text": "", 
            "title": "Waffles"
        }, 
        {
            "location": "/quickstart/#introduction", 
            "text": "Waffles is a lightweight configuration management system written in bash, simiar to other tools such as Puppet, Chef, or Ansible.", 
            "title": "Introduction"
        }, 
        {
            "location": "/quickstart/#quickstart", 
            "text": "If you just want to get up and running with Waffles, follow these steps:   Clone the waffles repository:   $ git clone https://github.com/jtopjian/waffles .waffles    Review the  waffles.conf  file and make any appropriate changes.    Create  /root/.waffles/site/roles/memcached.sh  with the following contents:    stdlib.data memcached\nstdlib.profile memcached/server   Create  site/data/memcached.sh  with the following contents:   data_memcached_server_listen= 0.0.0.0    Create  site/profiles/memcached/scripts/server.sh  with the following contents:   stdlib.title profiles/memcached\n\n# Install memcached\nstdlib.apt --package memcached --version latest\n\n# Set the listen option\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line  -l $data_memcached_server_listen  --match  ^-l \n\n# Manage the memcached service\nstdlib.sysvinit --name memcached\n\n# Restart memcached if anything changed\nif [[ $stdlib_state_change == true ]]; then\n  /etc/init.d/memcached restart\nfi   Install  memcached  on the current node you're on by running:   $ waffles.sh -r memcached  The end result will be a simple  memcached  server.  If you'd prefer to provision a remote node with  memcached , do the following:  $ waffles.sh -s memcached.example.com -r memcached  This assumes you have SSH and rsync access to  memcached.example.com .", 
            "title": "Quickstart"
        }, 
        {
            "location": "/cookbook/install/", 
            "text": "Install Waffles\n\n\nDescription\n\n\nThis recipe will show how to install Waffles.\n\n\nSteps\n\n\n\n\nClone the repository to a directory of your choice:\n\n\n\n\n$ git clone https://github.com/jtopjian/waffles .waffles\n$ cd .waffles\n\n\n\n\n\n\nCreate a data file:\n\n\n\n\n$ cat \n site/data/memcached.sh \nEOF\ndata_memcached_interface=\n0.0.0.0\n\nEOF\n\n\n\n\n\n\nCreate a profile:\n\n\n\n\n$ cat \n site/profiles/memcached/scripts/server.sh \nEOF\nstdlib.title site/profiles/memcached/server\nstdlib.apt --package memcached --version latest\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line \n-l $data_memcached_server_listen\n --match \n^-l\n\nstdlib.sysvinit --name memcached\n\nif [[ $stdlib_state_change == true ]]; then\n  stdlib.mute /etc/init.d/memcached restart\nfi\n\n\n\n\n\n\nCreate a role:\n\n\n\n\n$ cat \n site/roles/memcached.sh \nEOF\nstdlib.data memcached\nstdlib.profile memcached/server", 
            "title": "Installation"
        }, 
        {
            "location": "/cookbook/install/#install-waffles", 
            "text": "", 
            "title": "Install Waffles"
        }, 
        {
            "location": "/cookbook/install/#description", 
            "text": "This recipe will show how to install Waffles.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/install/#steps", 
            "text": "Clone the repository to a directory of your choice:   $ git clone https://github.com/jtopjian/waffles .waffles\n$ cd .waffles   Create a data file:   $ cat   site/data/memcached.sh  EOF\ndata_memcached_interface= 0.0.0.0 \nEOF   Create a profile:   $ cat   site/profiles/memcached/scripts/server.sh  EOF\nstdlib.title site/profiles/memcached/server\nstdlib.apt --package memcached --version latest\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line  -l $data_memcached_server_listen  --match  ^-l \nstdlib.sysvinit --name memcached\n\nif [[ $stdlib_state_change == true ]]; then\n  stdlib.mute /etc/init.d/memcached restart\nfi   Create a role:   $ cat   site/roles/memcached.sh  EOF\nstdlib.data memcached\nstdlib.profile memcached/server", 
            "title": "Steps"
        }, 
        {
            "location": "/concepts/", 
            "text": "Waffles from Scratch\n\n\nTo illustrate Waffles's design, I'll walk through the creation of a Bash script that can successfully run multiple times on a single server and only make changes to the server when required.\n\n\nLet's Create a Simple memcached Server in Bash\n\n\nmemcached\n is a very simple service. It's a single daemon with a simple configuration file installed from a single package.\n\n\nLet's say we want to create a \nmemcached\n server on a Linux container or virtual machine. Rather than running the commands manually, we'll create a Bash script to do the work. This will serve two purposes:\n\n\n\n\nDocumentation\n\n\nRepeatable process\n\n\n\n\nThe First Draft\n\n\nThe initial Bash script would look something like:\n\n\n#!/bin/bash\n\napt-get install -y memcached\n\n\n\n\nThe Second Draft\n\n\nThis works, and doing \nps aux\n shows that \nmemcached\n is indeed running. But then we notice that \nmemcached\n is only listening on \nlocalhost\n:\n\n\n$ netstat -nap | grep 11211\n\n\n\n\nSince this \nmemcached\n service will be used by other services on the network, we need to change \nmemcached\n's interface binding to \n0.0.0.0\n. The following should work:\n\n\n$ sed -i -e '/^-l 127.0.0.1$/c -l 0.0.0.0' /etc/memcached.conf\n$ /etc/init.d/memcached restart\n\n\n\n\nAnd once that's tested on the command line, we add it to our script:\n\n\n#!/bin/bash\n\napt-get install -y memcached\nsed -i -e '/^-l 127.0.0.1$/c -l 0.0.0.0' /etc/memcached.conf\n/etc/init.d/memcached restart\n\n\n\n\nAstute readers will see an issue. In order for us to test this script, we need to run it again. However, the script is going to report that \nmemcached\n is already installed and an unnecessary restart of \nmemcached\n will take place.\n\n\nThere are two ways to resolve this issue:\n\n\nThe first is by starting over from scratch and running the script on a new server. There's a lot of merit to this method. For example, you can be sure that the exact steps work in sequence on new servers. However, the entire process could take a long time for some situations. Also, what if this \nmemcached\n service was in production? Either you'd have to take the \nmemcached\n service down temporarily while the new service builds or you'd have to find some way of seamlessly adding in the new service while removing the old. While there's benefit to this (which is similar to the current popularity of \"microservices\"), it may not always be a possible solution.\n\n\nThe second way is to alter the script so that changes are only made if required. If a change does not need to be made, nothing happens.\n\n\nLet's say it's not possible for us to rebuild from scratch. Therefore, we'll opt for the second option.\n\n\nThe Third Draft\n\n\nIn order to run our Bash script against a running service without causing (too much of) a disruption, we must ensure that each step is executed only if it needs to be. This means that before any command has run, we must check to see what the current state of the system is, compare it to the change we want to make, and only make the change if the system state does not match.\n\n\nBy doing this, our Bash script becomes a \"state declaration\" that describes how the \nmemcached\n service should be configured when the script is done running. This is known as \nIdempotence\n in Configuration Management.\n\n\nSo let's make our basic Bash script more idempotent:\n\n\ndpkg -s memcached \n/dev/null\nif [ $? == 1 ]; then\n  echo \nInstalling memcached\n\n  apt-get install -y memcached\nfi\n\ngrep -q '^-l 127.0.0.1' /etc/memcached.conf\nif [ $? == 0 ]; then\n  echo \nUpdating memcached.conf and restarting it.\n\n  sed -i -e '/^-l 127.0.0.1$/c -l 0.0.0.0' /etc/memcached.conf\n  /etc/init.d/memcached restart\nfi\n\n\n\n\nWith this in place, we can now execute this script multiple times on the same server, virtual machine, or container, and if a step has already been done it will not happen again.\n\n\nThe Fourth Draft\n\n\nHaving to do a bunch of \ngrep\ns and other checks can become very tedious. Waffles tries to resolve this by including a Standard Library of common tasks. Using the Waffles Standard Library, the above script can be re-written as:\n\n\n#!/bin/bash\n\nsource ./waffles.conf\nsource ./lib/init.sh\n\nstdlib.apt --package memcached\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\nstdlib.sysvinit --name memcached\n\nif [ \n$stdlib_state_change\n == true ]; then\n  /etc/init.d/memcached restart\nfi\n\n\n\n\nThere's nothing magical about these commands. They're a collection of standard Bash functions that sweep all of the messy \ngrep\ns under the carpet. You can see the full collection of Standard Library functions in the \nlib/\n directory.\n\n\nThe Fifth Draft\n\n\nThe core \nmemcached\n service is up and running, but there's still a few more tasks that need to be done. For example, maybe we want to create some users:\n\n\nstdlib.groupadd --group jdoe --gid 999\nstdlib.useradd --user jdoe --uid 999 --gid 999 --comment \nJohn\n --shell /bin/bash --homedir /home/jdoe --createhome true\n\n\n\n\nstdlib.useradd\n is another Waffles Standard Library function that enables an easy way to create and manage a user on a server.\n\n\nLooking at the above command, there are a lot of settings that are hard-coded. If we end up creating a \nredis\n server that also needs the \njdoe\n user, we could just copy that line verbatim, but what about a scenario where the \nuid\n must be changed to \n500\n? Then we'd need to change every occurrence of \n999\n to \n500\n. In large environments, there's a chance some changes would be missed.\n\n\nTo resolve this issue, Waffles allows settings such as this (known as \ndata\n) to be stored in data files.\n\n\nA simple way of using data is to just throw all settings into a file called \nsite/data/common.sh\n.\n\n\nLet's add a user:\n\n\ndata_users=(\n  jdoe\n)\n\ndeclare -Ag data_user_info\ndata_user_info=(\n  [jdoe|uid]=999\n  [jdoe|gid]=999\n  [jdoe|comment]=\nJohn doe\n\n  [jdoe|homedir]=\n/home/jdoe\n\n  [jdoe|shell]=\n/bin/bash\n\n  [jdoe|create_home]=true\n)\n\n\n\n\nWaffles data variables can be named anything, but if you want to follow the project standards, have the variables start with \ndata_\n.\n\n\nWith all of this in place, the fifth draft now looks like:\n\n\n#!/bin/bash\n\nsource ./waffles.conf\nsource ./lib/init.sh\n\nstdlib.data common\n\nfor user in \n${data_users[@]}\n; do\n\n  homedir=\n${data_user_info[${user}|homedir]}\n\n  uid=\n${data_user_info[${user}|uid]}\n\n  gid=\n${data_user_info[${user}|gid]}\n\n  comment=\n${data_user_info[${user}|comment]}\n\n  shell=\n${data_user_info[${user}|shell]}\n\n  create_home=\n${data_user_info[${user}|create_home]}\n\n\n  stdlib.groupadd --group \n$user\n --gid \n$gid\n\n  stdlib.useradd --state present --user \n$user\n --uid \n$uid\n --gid \n$gid\n --comment \n$comment\n --homedir \n$homedir\n --shell \n$shell\n --createhome \n$createhome\n\n\ndone\n\nstdlib.apt --package memcached\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\nstdlib.sysvinit --name memcached\n\nif [ \n$stdlib_state_change\n == true ]; then\n  /etc/init.d/memcached restart\nfi\n\n\n\n\nThe Sixth Draft\n\n\nThe block of user data can be re-used in other scripts. It'd be best if we just moved it out into its own separate script. By repeating this process, we can create a library of re-usable components. Final scripts then become \"compositions\" of the collection of scripts.\n\n\nCreate the directory structure \nsite/profiles/common/scripts\n and add the following to \nsite/profiles/common/scripts/users.sh\n\n\nfor user in \n${data_users[@]}\n; do\n\n  homedir=\n${data_user_info[${user}|homedir]}\n\n  uid=\n${data_user_info[${user}|uid]}\n\n  gid=\n${data_user_info[${user}|gid]}\n\n  comment=\n${data_user_info[${user}|comment]}\n\n  shell=\n${data_user_info[${user}|shell]}\n\n  create_home=\n${data_user_info[${user}|create_home]}\n\n\n  stdlib.groupadd --group \n$user\n --gid \n$gid\n\n  stdlib.useradd --state present --user \n$user\n --uid \n$uid\n --gid \n$gid\n --comment \n$comment\n --homedir \n$homedir\n --shell \n$shell\n --createhome \n$createhome\n\n\ndone\n\n\n\n\nAnd so the sixth draft now looks like:\n\n\n#!/bin/bash\n\nsource ./waffles.conf\nsource ./lib/init.sh\n\nstdlib.data common\nstdlib.profile common/users\n\nstdlib.apt --package memcached\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\nstdlib.sysvinit --name memcached\n\nif [ \n$stdlib_state_change\n == true ]; then\n  /etc/init.d/memcached restart\nfi\n\n\n\n\nYou can create this script inside the Waffles directory (where \nwaffles.conf\n is located), and run it like so:\n\n\nbash test.sh\n\n\n\n\nWhen you run it for the first time on a new server, it'll add the group, user, and set up \nmemcached\n. Run it multiple times and note how those same actions were not performed since the script detected that no changes needed to be made.\n\n\nConclusion\n\n\nAt this point, we've effectively recreated the core of Waffles. The rest of controls how Waffles runs and where to find various files that Waffles needs to read.", 
            "title": "Concepts"
        }, 
        {
            "location": "/concepts/#waffles-from-scratch", 
            "text": "To illustrate Waffles's design, I'll walk through the creation of a Bash script that can successfully run multiple times on a single server and only make changes to the server when required.", 
            "title": "Waffles from Scratch"
        }, 
        {
            "location": "/concepts/#lets-create-a-simple-memcached-server-in-bash", 
            "text": "memcached  is a very simple service. It's a single daemon with a simple configuration file installed from a single package.  Let's say we want to create a  memcached  server on a Linux container or virtual machine. Rather than running the commands manually, we'll create a Bash script to do the work. This will serve two purposes:   Documentation  Repeatable process   The First Draft  The initial Bash script would look something like:  #!/bin/bash\n\napt-get install -y memcached  The Second Draft  This works, and doing  ps aux  shows that  memcached  is indeed running. But then we notice that  memcached  is only listening on  localhost :  $ netstat -nap | grep 11211  Since this  memcached  service will be used by other services on the network, we need to change  memcached 's interface binding to  0.0.0.0 . The following should work:  $ sed -i -e '/^-l 127.0.0.1$/c -l 0.0.0.0' /etc/memcached.conf\n$ /etc/init.d/memcached restart  And once that's tested on the command line, we add it to our script:  #!/bin/bash\n\napt-get install -y memcached\nsed -i -e '/^-l 127.0.0.1$/c -l 0.0.0.0' /etc/memcached.conf\n/etc/init.d/memcached restart  Astute readers will see an issue. In order for us to test this script, we need to run it again. However, the script is going to report that  memcached  is already installed and an unnecessary restart of  memcached  will take place.  There are two ways to resolve this issue:  The first is by starting over from scratch and running the script on a new server. There's a lot of merit to this method. For example, you can be sure that the exact steps work in sequence on new servers. However, the entire process could take a long time for some situations. Also, what if this  memcached  service was in production? Either you'd have to take the  memcached  service down temporarily while the new service builds or you'd have to find some way of seamlessly adding in the new service while removing the old. While there's benefit to this (which is similar to the current popularity of \"microservices\"), it may not always be a possible solution.  The second way is to alter the script so that changes are only made if required. If a change does not need to be made, nothing happens.  Let's say it's not possible for us to rebuild from scratch. Therefore, we'll opt for the second option.  The Third Draft  In order to run our Bash script against a running service without causing (too much of) a disruption, we must ensure that each step is executed only if it needs to be. This means that before any command has run, we must check to see what the current state of the system is, compare it to the change we want to make, and only make the change if the system state does not match.  By doing this, our Bash script becomes a \"state declaration\" that describes how the  memcached  service should be configured when the script is done running. This is known as  Idempotence  in Configuration Management.  So let's make our basic Bash script more idempotent:  dpkg -s memcached  /dev/null\nif [ $? == 1 ]; then\n  echo  Installing memcached \n  apt-get install -y memcached\nfi\n\ngrep -q '^-l 127.0.0.1' /etc/memcached.conf\nif [ $? == 0 ]; then\n  echo  Updating memcached.conf and restarting it. \n  sed -i -e '/^-l 127.0.0.1$/c -l 0.0.0.0' /etc/memcached.conf\n  /etc/init.d/memcached restart\nfi  With this in place, we can now execute this script multiple times on the same server, virtual machine, or container, and if a step has already been done it will not happen again.  The Fourth Draft  Having to do a bunch of  grep s and other checks can become very tedious. Waffles tries to resolve this by including a Standard Library of common tasks. Using the Waffles Standard Library, the above script can be re-written as:  #!/bin/bash\n\nsource ./waffles.conf\nsource ./lib/init.sh\n\nstdlib.apt --package memcached\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \nstdlib.sysvinit --name memcached\n\nif [  $stdlib_state_change  == true ]; then\n  /etc/init.d/memcached restart\nfi  There's nothing magical about these commands. They're a collection of standard Bash functions that sweep all of the messy  grep s under the carpet. You can see the full collection of Standard Library functions in the  lib/  directory.  The Fifth Draft  The core  memcached  service is up and running, but there's still a few more tasks that need to be done. For example, maybe we want to create some users:  stdlib.groupadd --group jdoe --gid 999\nstdlib.useradd --user jdoe --uid 999 --gid 999 --comment  John  --shell /bin/bash --homedir /home/jdoe --createhome true  stdlib.useradd  is another Waffles Standard Library function that enables an easy way to create and manage a user on a server.  Looking at the above command, there are a lot of settings that are hard-coded. If we end up creating a  redis  server that also needs the  jdoe  user, we could just copy that line verbatim, but what about a scenario where the  uid  must be changed to  500 ? Then we'd need to change every occurrence of  999  to  500 . In large environments, there's a chance some changes would be missed.  To resolve this issue, Waffles allows settings such as this (known as  data ) to be stored in data files.  A simple way of using data is to just throw all settings into a file called  site/data/common.sh .  Let's add a user:  data_users=(\n  jdoe\n)\n\ndeclare -Ag data_user_info\ndata_user_info=(\n  [jdoe|uid]=999\n  [jdoe|gid]=999\n  [jdoe|comment]= John doe \n  [jdoe|homedir]= /home/jdoe \n  [jdoe|shell]= /bin/bash \n  [jdoe|create_home]=true\n)  Waffles data variables can be named anything, but if you want to follow the project standards, have the variables start with  data_ .  With all of this in place, the fifth draft now looks like:  #!/bin/bash\n\nsource ./waffles.conf\nsource ./lib/init.sh\n\nstdlib.data common\n\nfor user in  ${data_users[@]} ; do\n\n  homedir= ${data_user_info[${user}|homedir]} \n  uid= ${data_user_info[${user}|uid]} \n  gid= ${data_user_info[${user}|gid]} \n  comment= ${data_user_info[${user}|comment]} \n  shell= ${data_user_info[${user}|shell]} \n  create_home= ${data_user_info[${user}|create_home]} \n\n  stdlib.groupadd --group  $user  --gid  $gid \n  stdlib.useradd --state present --user  $user  --uid  $uid  --gid  $gid  --comment  $comment  --homedir  $homedir  --shell  $shell  --createhome  $createhome \n\ndone\n\nstdlib.apt --package memcached\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \nstdlib.sysvinit --name memcached\n\nif [  $stdlib_state_change  == true ]; then\n  /etc/init.d/memcached restart\nfi  The Sixth Draft  The block of user data can be re-used in other scripts. It'd be best if we just moved it out into its own separate script. By repeating this process, we can create a library of re-usable components. Final scripts then become \"compositions\" of the collection of scripts.  Create the directory structure  site/profiles/common/scripts  and add the following to  site/profiles/common/scripts/users.sh  for user in  ${data_users[@]} ; do\n\n  homedir= ${data_user_info[${user}|homedir]} \n  uid= ${data_user_info[${user}|uid]} \n  gid= ${data_user_info[${user}|gid]} \n  comment= ${data_user_info[${user}|comment]} \n  shell= ${data_user_info[${user}|shell]} \n  create_home= ${data_user_info[${user}|create_home]} \n\n  stdlib.groupadd --group  $user  --gid  $gid \n  stdlib.useradd --state present --user  $user  --uid  $uid  --gid  $gid  --comment  $comment  --homedir  $homedir  --shell  $shell  --createhome  $createhome \n\ndone  And so the sixth draft now looks like:  #!/bin/bash\n\nsource ./waffles.conf\nsource ./lib/init.sh\n\nstdlib.data common\nstdlib.profile common/users\n\nstdlib.apt --package memcached\nstdlib.file_line --name memcached.conf/listen --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \nstdlib.sysvinit --name memcached\n\nif [  $stdlib_state_change  == true ]; then\n  /etc/init.d/memcached restart\nfi  You can create this script inside the Waffles directory (where  waffles.conf  is located), and run it like so:  bash test.sh  When you run it for the first time on a new server, it'll add the group, user, and set up  memcached . Run it multiple times and note how those same actions were not performed since the script detected that no changes needed to be made.", 
            "title": "Let's Create a Simple memcached Server in Bash"
        }, 
        {
            "location": "/concepts/#conclusion", 
            "text": "At this point, we've effectively recreated the core of Waffles. The rest of controls how Waffles runs and where to find various files that Waffles needs to read.", 
            "title": "Conclusion"
        }, 
        {
            "location": "/usage/", 
            "text": "How to Use Waffles\n\n\nRoles\n\n\nIn Waffles, a \"role\" is a name that identifies a unique configuration set. Examples of roles could be:\n\n\n\n\nmemcached\n\n\nmemcached_apt\n\n\nmemcached_yum\n\n\nmemcached_yum_lxc\n\n\nmemcached_and_redis\n\n\n\n\nRole names are totally up to you -- just make sure \nyou\n understand that applying the \nmemcached_yum_lxc\n role to an Ubuntu-based KVM virtual machine probably won't work.\n\n\nFor the sake of simplicity, we'll call our role \nmemcached\n.\n\n\nRoles are defined in \nsite/roles\n. \nsite\n is a special directory that will hold the configuration for your \nsite\n or environment. You most likely wouldn't be able to transfer \nsite\n to a new environment and have it run without some level of modification.\n\n\nNote: The location of the \nsite\n directory can be changed in \nwaffles.conf\n, but at this time, Waffles requires it to be in the main \nwaffles\n directory.\n\n\nA role is really just a Bash script, and if you'd prefer to just use Waffles to organize a collection of deployment scripts, go for it.\n\n\nTo use roles most effectively, think of them as glue between \ndata\n and \nprofiles\n:\n\n\n\n\nData is settings that make your site unique: user IDs, config file settings, package versions, etc.\n\n\nProfiles are small snippets of scripts that make up a unique service configuration.\n\n\n\n\nA very simple role could look like this:\n\n\n# Reads data from site/data/common.sh\nstdlib.data common\n\n# Reads data from site/data/memcached.sh\nstdlib.data memcached\n\n# Reads site/profiles/common/scripts/users.sh\nstdlib.profile common/users\n\n# Reads site/profiles/common/scripts/packages.sh\nstdlib.profile common/packages\n\n# Reads site/profiles/memcached/scripts/init.sh\nstdlib.profile memcached\n\n\n\n\nData\n\n\nScripts stored in \nsite/data\n are, again, just regular Bash scripts. It's only by convension that you store data, and not programming logic, in these files.\n\n\nSo what is \"data\"? It's all of the settings that make your site or environment unique:\n\n\n\n\nIP Addresses\n\n\nUsernames, UIDs, GIDs\n\n\nPackage versions\n\n\nFirewall rules\n\n\n\n\nData files looks like this:\n\n\ndata_memcached_listen=\n0.0.0.0\n\n\ndeclare -Ag data_user_info\ndata_user_info=(\n  [jdoe|uid]=999\n  [jdoe|gid]=999\n  [jdoe|comment]=\nJohn doe\n\n  [jdoe|homedir]=\n/home/jdoe\n\n  [jdoe|shell]=\n/bin/bash\n\n  [jdoe|create_home]=true\n)\n\n\n\n\nYou can name the variables anything you like, though the Waffles naming convension is to start each variable with \ndata_\n.\n\n\nNote: Bash associative arrays \nmust\n be declared as global variables. This is because all files are sourced inside a Bash function and, for whatever reason, associative arrays are not visible outside of a function (unlike all other Bash variable types).\n\n\nHierarchial Data\n\n\nBy declaring multiple data files in your role, you can create a hierarchy of data. For example:\n\n\nstdlib.data common\nstdlib.data memcached\n\n\n\n\nIn the above, common settings that are applicable to \nany\n role are stored in \nsite/data/common.sh\n. Only data relevant to the \nmemcached\n service is stored in \nsite/data/memcached.sh\n.\n\n\nYou can even declare the same variable in both data files. The data file declared last will overwrite all previous declarations and win.\n\n\nFinally, you can reference data from a previously declared data file. You can't, however, reference variables in data files \nbefore\n they were declared. To clarify: \nsite/data/memcached.sh\n can reference data from \nsite/data/common.sh\n, but not vice versa.\n\n\nData Structure\n\n\nThe placement of data files is flexible. You can do any of the following:\n\n\nstdlib.data common =\n data/common.sh\nstdlib.data common =\n data/common/init.sh\nstdlib.data common/users =\n data/common/users.sh\nstdlib.data memcached =\n data/memcached.sh\nstdlib.data memcached =\n data/memcached/init.sh\n\n\n\n\nProfiles\n\n\nProfiles are small snippets of bash scripts that are called from Roles. These profiles are run in a top-down fashion. Waffles does not support any other method of order.\n\n\nIt's possible to call Profiles from other Profiles, but that's not an encouraged practice.\n\n\nProfiles are meant to be shared among multiple roles. This easily makes sense for profiles like \ncommon/users\n, but when would you re-use \nmemcached\n? How about between a development and production environment? The same profile could be used in both roles and it would be the job of the data to provide the information that makes each environment different:\n\n\nDevelopment Memcached\n\n\nstdlib.data common\nstdlib.data development/memcached\n\nstdlib.profiles common/users\nstdlib.profiles common/packages\nstdlib.profiles memcached\n\n\n\n\nProduction Memcached\n\n\nstdlib.data common\nstdlib.data production/memcached\n\nstdlib.profiles common/users\nstdlib.profiles common/packages\nstdlib.profiles memcached\n\n\n\n\nWaffles does not enforce this pattern -- you are free to design your roles however you like.\n\n\nProfile Structure\n\n\nUnlike Data and Roles, Profiles have a standard structure to them:\n\n\nconsul/\n\u251c\u2500\u2500 files\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 consul.conf\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 install_linux.sh\n    \u2514\u2500\u2500 server.sh\n\n\n\n\nStatic files go under \nfiles\n while scripts go under \nscripts\n.\n\n\nWhen using the \nstdlib.file\n resource, you can use the \n--source\n option to copy files to their destination. The \n--source\n option is restricted to only being able to copy from the \nfiles\n directory.\n\n\nWhen declaring profiles in roles, the following translations happen:\n\n\nstdlib.profiles common/users =\n profiles/common/scripts/users.sh\nstdlib.profiles common/packages =\n profiles/common/scripts/packages.sh\nstdlib.profiles memcached =\n profiles/memcached/scripts/init.sh\nstdlib.profiles memcached/utils =\n profiles/memcached/scripts/utils.sh\n\n\n\n\nApplying Roles\n\n\nWaffles supports two ways of applying roles:\n\n\nLocal Execution\n\n\nYou can run \nwaffles.sh\n directly on a node and Waffles will apply the role to that node. This is most useful when you copy the entire contents of the \nwaffles\n directory to a node.\n\n\nRemote Execution (push)\n\n\nIt's possible to run Waffles on a remote node by pushing the configuration via rsync and SSH. To do this, set the environment variable \nSTREAM=1\n. For example:\n\n\n$ waffles.sh -s www.example.com -r web\n\n\n\n\nNote: at this time, both the Waffles server and destination node must have rsync installed.\n\n\nRemote Execution (pull)\n\n\nWaffles does not support pull-based deployment yet.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#how-to-use-waffles", 
            "text": "", 
            "title": "How to Use Waffles"
        }, 
        {
            "location": "/usage/#roles", 
            "text": "In Waffles, a \"role\" is a name that identifies a unique configuration set. Examples of roles could be:   memcached  memcached_apt  memcached_yum  memcached_yum_lxc  memcached_and_redis   Role names are totally up to you -- just make sure  you  understand that applying the  memcached_yum_lxc  role to an Ubuntu-based KVM virtual machine probably won't work.  For the sake of simplicity, we'll call our role  memcached .  Roles are defined in  site/roles .  site  is a special directory that will hold the configuration for your  site  or environment. You most likely wouldn't be able to transfer  site  to a new environment and have it run without some level of modification.  Note: The location of the  site  directory can be changed in  waffles.conf , but at this time, Waffles requires it to be in the main  waffles  directory.  A role is really just a Bash script, and if you'd prefer to just use Waffles to organize a collection of deployment scripts, go for it.  To use roles most effectively, think of them as glue between  data  and  profiles :   Data is settings that make your site unique: user IDs, config file settings, package versions, etc.  Profiles are small snippets of scripts that make up a unique service configuration.   A very simple role could look like this:  # Reads data from site/data/common.sh\nstdlib.data common\n\n# Reads data from site/data/memcached.sh\nstdlib.data memcached\n\n# Reads site/profiles/common/scripts/users.sh\nstdlib.profile common/users\n\n# Reads site/profiles/common/scripts/packages.sh\nstdlib.profile common/packages\n\n# Reads site/profiles/memcached/scripts/init.sh\nstdlib.profile memcached", 
            "title": "Roles"
        }, 
        {
            "location": "/usage/#data", 
            "text": "Scripts stored in  site/data  are, again, just regular Bash scripts. It's only by convension that you store data, and not programming logic, in these files.  So what is \"data\"? It's all of the settings that make your site or environment unique:   IP Addresses  Usernames, UIDs, GIDs  Package versions  Firewall rules   Data files looks like this:  data_memcached_listen= 0.0.0.0 \n\ndeclare -Ag data_user_info\ndata_user_info=(\n  [jdoe|uid]=999\n  [jdoe|gid]=999\n  [jdoe|comment]= John doe \n  [jdoe|homedir]= /home/jdoe \n  [jdoe|shell]= /bin/bash \n  [jdoe|create_home]=true\n)  You can name the variables anything you like, though the Waffles naming convension is to start each variable with  data_ .  Note: Bash associative arrays  must  be declared as global variables. This is because all files are sourced inside a Bash function and, for whatever reason, associative arrays are not visible outside of a function (unlike all other Bash variable types).  Hierarchial Data  By declaring multiple data files in your role, you can create a hierarchy of data. For example:  stdlib.data common\nstdlib.data memcached  In the above, common settings that are applicable to  any  role are stored in  site/data/common.sh . Only data relevant to the  memcached  service is stored in  site/data/memcached.sh .  You can even declare the same variable in both data files. The data file declared last will overwrite all previous declarations and win.  Finally, you can reference data from a previously declared data file. You can't, however, reference variables in data files  before  they were declared. To clarify:  site/data/memcached.sh  can reference data from  site/data/common.sh , but not vice versa.  Data Structure  The placement of data files is flexible. You can do any of the following:  stdlib.data common =  data/common.sh\nstdlib.data common =  data/common/init.sh\nstdlib.data common/users =  data/common/users.sh\nstdlib.data memcached =  data/memcached.sh\nstdlib.data memcached =  data/memcached/init.sh", 
            "title": "Data"
        }, 
        {
            "location": "/usage/#profiles", 
            "text": "Profiles are small snippets of bash scripts that are called from Roles. These profiles are run in a top-down fashion. Waffles does not support any other method of order.  It's possible to call Profiles from other Profiles, but that's not an encouraged practice.  Profiles are meant to be shared among multiple roles. This easily makes sense for profiles like  common/users , but when would you re-use  memcached ? How about between a development and production environment? The same profile could be used in both roles and it would be the job of the data to provide the information that makes each environment different:  Development Memcached  stdlib.data common\nstdlib.data development/memcached\n\nstdlib.profiles common/users\nstdlib.profiles common/packages\nstdlib.profiles memcached  Production Memcached  stdlib.data common\nstdlib.data production/memcached\n\nstdlib.profiles common/users\nstdlib.profiles common/packages\nstdlib.profiles memcached  Waffles does not enforce this pattern -- you are free to design your roles however you like.  Profile Structure  Unlike Data and Roles, Profiles have a standard structure to them:  consul/\n\u251c\u2500\u2500 files\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 consul.conf\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 install_linux.sh\n    \u2514\u2500\u2500 server.sh  Static files go under  files  while scripts go under  scripts .  When using the  stdlib.file  resource, you can use the  --source  option to copy files to their destination. The  --source  option is restricted to only being able to copy from the  files  directory.  When declaring profiles in roles, the following translations happen:  stdlib.profiles common/users =  profiles/common/scripts/users.sh\nstdlib.profiles common/packages =  profiles/common/scripts/packages.sh\nstdlib.profiles memcached =  profiles/memcached/scripts/init.sh\nstdlib.profiles memcached/utils =  profiles/memcached/scripts/utils.sh", 
            "title": "Profiles"
        }, 
        {
            "location": "/usage/#applying-roles", 
            "text": "Waffles supports two ways of applying roles:  Local Execution  You can run  waffles.sh  directly on a node and Waffles will apply the role to that node. This is most useful when you copy the entire contents of the  waffles  directory to a node.  Remote Execution (push)  It's possible to run Waffles on a remote node by pushing the configuration via rsync and SSH. To do this, set the environment variable  STREAM=1 . For example:  $ waffles.sh -s www.example.com -r web  Note: at this time, both the Waffles server and destination node must have rsync installed.  Remote Execution (pull)  Waffles does not support pull-based deployment yet.", 
            "title": "Applying Roles"
        }, 
        {
            "location": "/modules/", 
            "text": "Modules\n\n\nAt this time, Waffles has no concept of \"modules\" or \"plug-ins\". This is intentional.\n\n\nAll resources are currently being bundled into \n/lib\n. This is because the resource files are so light-weight, there's no external cost of just having one large bundle of resources. This also means that there might be some disagreement on the best way a resource is implemented. We'll see how that goes.\n\n\nProfiles can be thought of as the closest thing to a \"module\" as they have a defined structure that includes areas for static files and scripts. Profiles might be interchangable between various projects, sites, and environments of yours, but they might not be usable for people outside of your domain of responsibility. This is also intentional. I want Waffles to help people quickly deploy and configure different types of services, but I also want to ensure they learn how the deployment is done and how the software works. I do not want to create a module ecosystem that is taken for granted instead of actually learning and understanding what is being deployed.", 
            "title": "Modules"
        }, 
        {
            "location": "/modules/#modules", 
            "text": "At this time, Waffles has no concept of \"modules\" or \"plug-ins\". This is intentional.  All resources are currently being bundled into  /lib . This is because the resource files are so light-weight, there's no external cost of just having one large bundle of resources. This also means that there might be some disagreement on the best way a resource is implemented. We'll see how that goes.  Profiles can be thought of as the closest thing to a \"module\" as they have a defined structure that includes areas for static files and scripts. Profiles might be interchangable between various projects, sites, and environments of yours, but they might not be usable for people outside of your domain of responsibility. This is also intentional. I want Waffles to help people quickly deploy and configure different types of services, but I also want to ensure they learn how the deployment is done and how the software works. I do not want to create a module ecosystem that is taken for granted instead of actually learning and understanding what is being deployed.", 
            "title": "Modules"
        }, 
        {
            "location": "/functions/types/", 
            "text": "Waffles is built around Bash functions. Some are only used internally, but others are available for use in your roles and profiles.\n\n\nstdlib\n\n\nFunctions that are prefixed with \nstdlib\n are considered core to Waffles. They can be used anywhere.\n\n\nnon-stdlib\n\n\nFunctions that are not prefixed with \nstdlib\n should be considered optional. Anything not prefixed with \nstdlib\n should \nnot\n be used in an \nstdlib\n function.", 
            "title": "Types"
        }, 
        {
            "location": "/functions/types/#stdlib", 
            "text": "Functions that are prefixed with  stdlib  are considered core to Waffles. They can be used anywhere.", 
            "title": "stdlib"
        }, 
        {
            "location": "/functions/types/#non-stdlib", 
            "text": "Functions that are not prefixed with  stdlib  should be considered optional. Anything not prefixed with  stdlib  should  not  be used in an  stdlib  function.", 
            "title": "non-stdlib"
        }, 
        {
            "location": "/functions/system/", 
            "text": "lib/system.sh\n contains functions that are considered core to Waffles.\n\n\nstdlib.array_contains\n\n\nReports true if element exists in an array.\n\n\nx=(foo bar baz)\nif stdlib.array_contains \nx\n \nfoo\n ; then\n  echo \nExists\n\nfi\n\n\n\n\nstdlib.array_join\n\n\nJoins an array into a string.\n\n\nx=(foo bar baz)\nstdlib.array_join x ,\n=\n foo,bar,baz\n\n\n\n\nstdlib.array_length\n\n\nReturns the length of an array.\n\n\nx=(a b c)\nstdlib.array_length x\n=\n 3\n\n\n\n\nstdlib.array_pop\n\n\nRemoves and returns the last element from an array.\n\n\nx=(a b c)\nstdlib.array_pop x\n=\n c\n\n\n\n\nstdlib.array_push\n\n\nAdds an element to the end of an array.\n\n\nx=()\nstdlib.array_push x foo\n\n\n\n\nstdlib.array_shift\n\n\nRemoves and returns the first element from an array\n\n\nx=(a b c)\nstdlib.array_shift x\n=\n a\n\n\n\n\nstdlib.array_unshift\n\n\nAdds an element to the beginning of the array.\n\n\nx=(b c)\nstdlib.array_unshift x a\n\n\n\n\nstdlib.capture_error\n\n\nTakes a command as input, prints the command, and detects if anything was written to \nstderr\n. If there was, the error is printed to \nstderr\n again, and if \nWAFFLES_EXIT_ON_ERROR\n is set, Waffles halts.\n\n\nstdlib.capture_error apt-get update\n\n\n\n\nstdlib.command_exists\n\n\nA simple wrapper around \nwhich\n.\n\n\nif [[ stdlib.command_exists apt-get ]]; then\n  stdlib.info \nWe're on a Debian-based system.\n\nfi\n\n\n\n\nstdlib.data\n\n\nThe same as \nstdlib.profiles\n but the shell scripts can be placed differently:\n\n\nstdlib.data common =\n data/common.sh\nstdlib.data common =\n data/common/init.sh\nstdlib.data common/users =\n data/common/users.sh\nstdlib.data memcached =\n data/memcached.sh\nstdlib.data memcached =\n data/memcached/init.sh\n\n\n\n\nstdlib.debug\n\n\nPrints a log message at \ndebug\n level.\n\n\nstdlib.debug \nFoobar\n\n\n\n\n\nstdlib.debug?\n\n\nDetermines if Waffles is being run in \ndebug\n mode.\n\n\nif stdlib.debug? ; then\n  stdlib.debug \nWe're in debug mode.\n\nfi\n\n\n\n\nstdlib.debug_mute\n\n\nLike \nstdlib.mute\n but messages only appear in \ndebug\n mode.\n\n\nstdlib.debug_mute apt-get update\n\n\n\n\nstdlib.dir\n\n\nA simple function that returns the current directory of the script currently being run.\n\n\nstdlib.error\n\n\nPrints an error message to \nstderr\n.\n\n\nstdlib.error \nFoobar\n\n\n\n\n\nstdlib.exec\n\n\nA simple function that takes a command as input, prints the command, and then executes it.\n\n\nstdlib.exec apt-get update\n\n\n\n\nstdlib.include\n\n\nA more intelligent \nsource\n. It checks if the file being sourced / included exists, and if not, prints a warning and moves on.\n\n\nstdlib.info\n\n\nPrints a log message at \ninfo\n level.\n\n\nstdlib.info \nFoobar\n\n\n\n\n\nstdlib.mute\n\n\nPrints the command being run, but suppresses the command output.\n\n\nstdlib.mute apt-get update\n\n\n\n\nstdlib.noop?\n\n\nDetermines if Waffles is being run in \nnoop\n mode.\n\n\nif stdlib.noop? ; then\n  stdlib.info \nWe're in noop mode.\n\nfi\n\n\n\n\nstdlib.profile\n\n\nTakes a profile as input and determines the shell script attached to the profile.\n\n\nIf Waffles is being run locally, then \nstdlib.include\n is run on the script. If Waffles is being run in push-based mode, then the profile is marked to be copied to the remote node.\n\n\nstdlib.profiles common/users =\n profiles/common/scripts/users.sh\nstdlib.profiles common/packages =\n profiles/common/scripts/packages.sh\nstdlib.profiles memcached =\n profiles/memcached/scripts/init.sh\nstdlib.profiles memcached/utils =\n profiles/memcached/scripts/utils.sh\n\n\n\n\nstdlib.split\n\n\nSplits a string into an array. Stores the result in \n__split\n. The delimiter can be multi-character.\n\n\nstdlib.split \nfoo/bar\n, \n/\n\nstdlib.info $__split[1] # bar\n\n\n\n\nstdlib.subtitle\n\n\nSets a subtitle context. This is usually used internally by resources. An internal counter to determine if the resource was changed:\n\n\n$ cat profiles/common/scripts/package.sh\nstdlib.title \nprofiles/common/packages\n\nstdlib.apt --package sl\n\nif [[ $stdlib_resource_change == true ]]; then\n  stdlib.info \nThe state of package sl changed\n\nfi\n\nstdlib.apt --package cowsay\n\nif [[ $stdlib_resource_change == true ]]; then\n  stdlib.info \nThe state of package cowsay changed\n\nfi\n\n\n\n\nstdlib.title\n\n\nSets a title context. A title is a major section of Waffles being run; for example, a profile. You usually being profiles by setting a title:\n\n\n$ cat profiles/common/scripts/package.sh\nstdlib.title \nprofiles/common/packages\n\nstdlib.apt --package sl\n\n\n\n\nInternal counters are reset whenever \nstdlib.title\n is used. This is useful for determining if any changes were made to a resource or the profile as a whole:\n\n\n$ cat profiles/common/scripts/package.sh\nstdlib.title \nprofiles/common/packages\n\nstdlib.apt --package sl\nstdlib.apt --package cowsay\n\nif [[ $stdlib_state_change == true ]]; then\n  stdlib.info \nOne of the above packages were updated.\n\nfi\n\n\n\n\nstdlib.trim\n\n\nTrims the whitespace on both sides of a string.\n\n\ntrimmed=$(stdlib.trim \n   foobar   \n\n\n\n\n\nstdlib.warn\n\n\nPrints a warning message.\n\n\nstdlib.warn \nFoobar", 
            "title": "system"
        }, 
        {
            "location": "/functions/system/#stdlibarray_contains", 
            "text": "Reports true if element exists in an array.  x=(foo bar baz)\nif stdlib.array_contains  x   foo  ; then\n  echo  Exists \nfi", 
            "title": "stdlib.array_contains"
        }, 
        {
            "location": "/functions/system/#stdlibarray_join", 
            "text": "Joins an array into a string.  x=(foo bar baz)\nstdlib.array_join x ,\n=  foo,bar,baz", 
            "title": "stdlib.array_join"
        }, 
        {
            "location": "/functions/system/#stdlibarray_length", 
            "text": "Returns the length of an array.  x=(a b c)\nstdlib.array_length x\n=  3", 
            "title": "stdlib.array_length"
        }, 
        {
            "location": "/functions/system/#stdlibarray_pop", 
            "text": "Removes and returns the last element from an array.  x=(a b c)\nstdlib.array_pop x\n=  c", 
            "title": "stdlib.array_pop"
        }, 
        {
            "location": "/functions/system/#stdlibarray_push", 
            "text": "Adds an element to the end of an array.  x=()\nstdlib.array_push x foo", 
            "title": "stdlib.array_push"
        }, 
        {
            "location": "/functions/system/#stdlibarray_shift", 
            "text": "Removes and returns the first element from an array  x=(a b c)\nstdlib.array_shift x\n=  a", 
            "title": "stdlib.array_shift"
        }, 
        {
            "location": "/functions/system/#stdlibarray_unshift", 
            "text": "Adds an element to the beginning of the array.  x=(b c)\nstdlib.array_unshift x a", 
            "title": "stdlib.array_unshift"
        }, 
        {
            "location": "/functions/system/#stdlibcapture_error", 
            "text": "Takes a command as input, prints the command, and detects if anything was written to  stderr . If there was, the error is printed to  stderr  again, and if  WAFFLES_EXIT_ON_ERROR  is set, Waffles halts.  stdlib.capture_error apt-get update", 
            "title": "stdlib.capture_error"
        }, 
        {
            "location": "/functions/system/#stdlibcommand_exists", 
            "text": "A simple wrapper around  which .  if [[ stdlib.command_exists apt-get ]]; then\n  stdlib.info  We're on a Debian-based system. \nfi", 
            "title": "stdlib.command_exists"
        }, 
        {
            "location": "/functions/system/#stdlibdata", 
            "text": "The same as  stdlib.profiles  but the shell scripts can be placed differently:  stdlib.data common =  data/common.sh\nstdlib.data common =  data/common/init.sh\nstdlib.data common/users =  data/common/users.sh\nstdlib.data memcached =  data/memcached.sh\nstdlib.data memcached =  data/memcached/init.sh", 
            "title": "stdlib.data"
        }, 
        {
            "location": "/functions/system/#stdlibdebug", 
            "text": "Prints a log message at  debug  level.  stdlib.debug  Foobar", 
            "title": "stdlib.debug"
        }, 
        {
            "location": "/functions/system/#stdlibdebug_1", 
            "text": "Determines if Waffles is being run in  debug  mode.  if stdlib.debug? ; then\n  stdlib.debug  We're in debug mode. \nfi", 
            "title": "stdlib.debug?"
        }, 
        {
            "location": "/functions/system/#stdlibdebug_mute", 
            "text": "Like  stdlib.mute  but messages only appear in  debug  mode.  stdlib.debug_mute apt-get update", 
            "title": "stdlib.debug_mute"
        }, 
        {
            "location": "/functions/system/#stdlibdir", 
            "text": "A simple function that returns the current directory of the script currently being run.", 
            "title": "stdlib.dir"
        }, 
        {
            "location": "/functions/system/#stdliberror", 
            "text": "Prints an error message to  stderr .  stdlib.error  Foobar", 
            "title": "stdlib.error"
        }, 
        {
            "location": "/functions/system/#stdlibexec", 
            "text": "A simple function that takes a command as input, prints the command, and then executes it.  stdlib.exec apt-get update", 
            "title": "stdlib.exec"
        }, 
        {
            "location": "/functions/system/#stdlibinclude", 
            "text": "A more intelligent  source . It checks if the file being sourced / included exists, and if not, prints a warning and moves on.", 
            "title": "stdlib.include"
        }, 
        {
            "location": "/functions/system/#stdlibinfo", 
            "text": "Prints a log message at  info  level.  stdlib.info  Foobar", 
            "title": "stdlib.info"
        }, 
        {
            "location": "/functions/system/#stdlibmute", 
            "text": "Prints the command being run, but suppresses the command output.  stdlib.mute apt-get update", 
            "title": "stdlib.mute"
        }, 
        {
            "location": "/functions/system/#stdlibnoop", 
            "text": "Determines if Waffles is being run in  noop  mode.  if stdlib.noop? ; then\n  stdlib.info  We're in noop mode. \nfi", 
            "title": "stdlib.noop?"
        }, 
        {
            "location": "/functions/system/#stdlibprofile", 
            "text": "Takes a profile as input and determines the shell script attached to the profile.  If Waffles is being run locally, then  stdlib.include  is run on the script. If Waffles is being run in push-based mode, then the profile is marked to be copied to the remote node.  stdlib.profiles common/users =  profiles/common/scripts/users.sh\nstdlib.profiles common/packages =  profiles/common/scripts/packages.sh\nstdlib.profiles memcached =  profiles/memcached/scripts/init.sh\nstdlib.profiles memcached/utils =  profiles/memcached/scripts/utils.sh", 
            "title": "stdlib.profile"
        }, 
        {
            "location": "/functions/system/#stdlibsplit", 
            "text": "Splits a string into an array. Stores the result in  __split . The delimiter can be multi-character.  stdlib.split  foo/bar ,  / \nstdlib.info $__split[1] # bar", 
            "title": "stdlib.split"
        }, 
        {
            "location": "/functions/system/#stdlibsubtitle", 
            "text": "Sets a subtitle context. This is usually used internally by resources. An internal counter to determine if the resource was changed:  $ cat profiles/common/scripts/package.sh\nstdlib.title  profiles/common/packages \nstdlib.apt --package sl\n\nif [[ $stdlib_resource_change == true ]]; then\n  stdlib.info  The state of package sl changed \nfi\n\nstdlib.apt --package cowsay\n\nif [[ $stdlib_resource_change == true ]]; then\n  stdlib.info  The state of package cowsay changed \nfi", 
            "title": "stdlib.subtitle"
        }, 
        {
            "location": "/functions/system/#stdlibtitle", 
            "text": "Sets a title context. A title is a major section of Waffles being run; for example, a profile. You usually being profiles by setting a title:  $ cat profiles/common/scripts/package.sh\nstdlib.title  profiles/common/packages \nstdlib.apt --package sl  Internal counters are reset whenever  stdlib.title  is used. This is useful for determining if any changes were made to a resource or the profile as a whole:  $ cat profiles/common/scripts/package.sh\nstdlib.title  profiles/common/packages \nstdlib.apt --package sl\nstdlib.apt --package cowsay\n\nif [[ $stdlib_state_change == true ]]; then\n  stdlib.info  One of the above packages were updated. \nfi", 
            "title": "stdlib.title"
        }, 
        {
            "location": "/functions/system/#stdlibtrim", 
            "text": "Trims the whitespace on both sides of a string.  trimmed=$(stdlib.trim     foobar", 
            "title": "stdlib.trim"
        }, 
        {
            "location": "/functions/system/#stdlibwarn", 
            "text": "Prints a warning message.  stdlib.warn  Foobar", 
            "title": "stdlib.warn"
        }, 
        {
            "location": "/functions/catalog/", 
            "text": "lib/catalog.sh\n contains functions related to the Waffles catalog. The catalog is an inventory of all resources that have been used in a role.\n\n\nAt this time, the catalog is built as Waffles is run. This means that you cannot use the catalog to see what resources will be used in the future.\n\n\nThe catalog is used internally to Waffles.\n\n\nstdlib.catalog.add\n\n\nAdds a resource to the catalog. If a resource of the same type and name exist, Waffles will either:\n\n\n\n\nError and halt if \nWAFFLES_EXIT_ON_DUPLICATE_RESOURCE\n is set.\n\n\nPrint a warning if not.\n\n\n\n\nstdlib.catalog.exists?\n\n\nReturns \ntrue\n or \nfalse\n if a resource is in the catalog.", 
            "title": "catalog"
        }, 
        {
            "location": "/functions/catalog/#stdlibcatalogadd", 
            "text": "Adds a resource to the catalog. If a resource of the same type and name exist, Waffles will either:   Error and halt if  WAFFLES_EXIT_ON_DUPLICATE_RESOURCE  is set.  Print a warning if not.", 
            "title": "stdlib.catalog.add"
        }, 
        {
            "location": "/functions/catalog/#stdlibcatalogexists", 
            "text": "Returns  true  or  false  if a resource is in the catalog.", 
            "title": "stdlib.catalog.exists?"
        }, 
        {
            "location": "/functions/options/", 
            "text": "lib/options.sh\n contains functions related to parsing resource options.\n\n\nstdlib.options.create_option\n\n\nThis function creates an option in a resource.\n\n\nlocal -A options\nstdlib.options.create_option state   \npresent\n\nstdlib.options.create_option package \n__required__\n\nstdlib.options.create_option version\nstdlib.options.parse_options \n$@\n\n\n\n\n\nTo successfully create a set of options:\n\n\n\n\nA local \noptions\n variable must be created. If not, the options will be appended to the last resource declared.\n\n\nstdlib.options.create_option\n is used with the first argument being the option name and the second argument being an optional default value.\n\n\nIf the default value is \n__required__\n, Waffles will error and halt if the option was not set.\n\n\n\n\nstdlib.options.create_mv_option\n\n\nThis function creates a multi-value option. These types of options can be specified multiple times. In order to use, you must declare\nan array of the same name as the option. For example, the \naugeas.mail_alias\n resource looks like this:\n\n\nlocal -A options\nlocal -a destination\nstdlib.options.create_option    state       \npresent\n\nstdlib.options.create_option    account     \n__required__\n\nstdlib.options.create_mv_option destination \n__required__\n\nstdlib.options.create_option    file        \n/etc/aliases\n\nstdlib.options.parse_options    \n$@\n\n\n\n\n\nNow when declaring an alias, you can do:\n\n\naugeas.mail_alias --root --destination jdoe --destination jsmith --destination foobar\n\n\n\n\nstdlib.options.parse_options\n\n\nThis function cycles through all options that were given in a declared resource. It will report if any required options were not set.", 
            "title": "options"
        }, 
        {
            "location": "/functions/options/#stdliboptionscreate_option", 
            "text": "This function creates an option in a resource.  local -A options\nstdlib.options.create_option state    present \nstdlib.options.create_option package  __required__ \nstdlib.options.create_option version\nstdlib.options.parse_options  $@   To successfully create a set of options:   A local  options  variable must be created. If not, the options will be appended to the last resource declared.  stdlib.options.create_option  is used with the first argument being the option name and the second argument being an optional default value.  If the default value is  __required__ , Waffles will error and halt if the option was not set.", 
            "title": "stdlib.options.create_option"
        }, 
        {
            "location": "/functions/options/#stdliboptionscreate_mv_option", 
            "text": "This function creates a multi-value option. These types of options can be specified multiple times. In order to use, you must declare\nan array of the same name as the option. For example, the  augeas.mail_alias  resource looks like this:  local -A options\nlocal -a destination\nstdlib.options.create_option    state        present \nstdlib.options.create_option    account      __required__ \nstdlib.options.create_mv_option destination  __required__ \nstdlib.options.create_option    file         /etc/aliases \nstdlib.options.parse_options     $@   Now when declaring an alias, you can do:  augeas.mail_alias --root --destination jdoe --destination jsmith --destination foobar", 
            "title": "stdlib.options.create_mv_option"
        }, 
        {
            "location": "/functions/options/#stdliboptionsparse_options", 
            "text": "This function cycles through all options that were given in a declared resource. It will report if any required options were not set.", 
            "title": "stdlib.options.parse_options"
        }, 
        {
            "location": "/functions/augeas/", 
            "text": "lib/augeas/augeas.sh\n contains helper functions for the Augeas resources. These are all used internally in the Augeas resources and you shouldn't need to use them anywhere else.\n\n\naugeas.run\n\n\nRuns a series of Augeas commands on a file.\n\n\naugeas.get\n\n\nChecks the state of an Augeas-based resource.", 
            "title": "augeas"
        }, 
        {
            "location": "/functions/augeas/#augeasrun", 
            "text": "Runs a series of Augeas commands on a file.", 
            "title": "augeas.run"
        }, 
        {
            "location": "/functions/augeas/#augeasget", 
            "text": "Checks the state of an Augeas-based resource.", 
            "title": "augeas.get"
        }, 
        {
            "location": "/functions/mysql/", 
            "text": "lib/mysql/mysql.sh\n contains helper functions for the MySQL resources\n\n\nmysql.admin_password_set?\n\n\nA simple function that checks if the MySQL service has an admin password set.\n\n\nmysql.mycnf\n\n\nA function that generates a \n.my.cnf\n file.\n\n\nmysql.mycnf --filename \n/root/.my.cnf\n --user root --password password\n\n\n\n\nThis isn't a first-class resource because it simply builds on other resources.", 
            "title": "mysql"
        }, 
        {
            "location": "/functions/mysql/#mysqladmin_password_set", 
            "text": "A simple function that checks if the MySQL service has an admin password set.", 
            "title": "mysql.admin_password_set?"
        }, 
        {
            "location": "/functions/mysql/#mysqlmycnf", 
            "text": "A function that generates a  .my.cnf  file.  mysql.mycnf --filename  /root/.my.cnf  --user root --password password  This isn't a first-class resource because it simply builds on other resources.", 
            "title": "mysql.mycnf"
        }, 
        {
            "location": "/cookbook/environment-vars/", 
            "text": "Environment Variable Support\n\n\nDescription\n\n\nThis recipe will show how to alter Waffles's behavior by setting different environment variables.\n\n\nWAFFLES_NOOP\n\n\nno-op stands for \"no operation\". Rather than actually executing commands, it will print what \nwould have\n happened if Waffles was run in normal mode.\n\n\nSteps\n\n\n\n\nRun Waffles with \nWAFFLES_NOOP\n set:\n\n\n\n\n$ WAFFLES_NOOP=1 waffles.sh memcached\n\n\n\n\nComments\n\n\nYou can also use the \n-n\n flag when running Waffles.\n\n\nWAFFLES_DEBUG\n\n\nThis will print extra information about each action. If Waffles is not working correctly, try running in \"debug\" mode and see if you can spot the error.\n\n\nThe output from \"debug\" mode is also the best way to report bugs.\n\n\nSteps\n\n\n\n\nRun Waffles with \nWAFFLES_DEBUG\n set:\n\n\n\n\n$ WAFFLES_DEBUG=1 waffles.sh memcached\n\n\n\n\nComments\n\n\nYou can also use the \n-d\n flag when running Waffles.\n\n\nTEST\n\n\nWhen TEST is set, Waffles will exit 1 if any changes were made. This is useful to verify the previous run was successful because no changes should need to be made upon the second execution.\n\n\nSteps\n\n\n\n\nRun Waffles with \nWAFFLES_TEST\n set:\n\n\n\n\n$ WAFFLES_TEST=1 waffles.sh memcached\n\n\n\n\nComments\n\n\nYou can also use the \n-t\n flag when running Waffles.", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/cookbook/environment-vars/#environment-variable-support", 
            "text": "", 
            "title": "Environment Variable Support"
        }, 
        {
            "location": "/cookbook/environment-vars/#description", 
            "text": "This recipe will show how to alter Waffles's behavior by setting different environment variables.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/environment-vars/#waffles_noop", 
            "text": "no-op stands for \"no operation\". Rather than actually executing commands, it will print what  would have  happened if Waffles was run in normal mode.  Steps   Run Waffles with  WAFFLES_NOOP  set:   $ WAFFLES_NOOP=1 waffles.sh memcached  Comments  You can also use the  -n  flag when running Waffles.", 
            "title": "WAFFLES_NOOP"
        }, 
        {
            "location": "/cookbook/environment-vars/#waffles_debug", 
            "text": "This will print extra information about each action. If Waffles is not working correctly, try running in \"debug\" mode and see if you can spot the error.  The output from \"debug\" mode is also the best way to report bugs.  Steps   Run Waffles with  WAFFLES_DEBUG  set:   $ WAFFLES_DEBUG=1 waffles.sh memcached  Comments  You can also use the  -d  flag when running Waffles.", 
            "title": "WAFFLES_DEBUG"
        }, 
        {
            "location": "/cookbook/environment-vars/#test", 
            "text": "When TEST is set, Waffles will exit 1 if any changes were made. This is useful to verify the previous run was successful because no changes should need to be made upon the second execution.  Steps   Run Waffles with  WAFFLES_TEST  set:   $ WAFFLES_TEST=1 waffles.sh memcached  Comments  You can also use the  -t  flag when running Waffles.", 
            "title": "TEST"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-server/", 
            "text": "Deploying a MySQL Server\n\n\nDescription\n\n\nThis recipe will show one way of deploying a MySQL server with Waffles. In particular, Percona MySQL.\n\n\nSteps\n\n\nData\n\n\nThere will only be one data item: the MySQL root password. This example will store the password in plain text -- note that a best practice would be to install it either in an encrypted repository, an encrypted string, or something along those lines.\n\n\n$ cat site/data/mysql.sh\ndata_mysql_root_password=\npassword\n\n\n\n\n\nProfiles\n\n\nWe'll use two profile scripts for the MySQL server: the first will configure the Percona repo and the second will install and configure MySQL itself.\n\n\nFirst, make the directory structure\n\n\n$ mkdir -p site/profiles/mysql/scripts\n\n\n\n\nNext, make the repo profile script, located at \nsite/profiles/mysql/scripts/percona_repo.sh\n:\n\n\nstdlib.title \nmysql/percona/repo\n\n\nsource /etc/lsb-release\n\nstdlib.apt_key --name percona --keyserver keys.gnupg.net --key 1C4CBDCDCD2EFD2A\nstdlib.apt_source --name percona --uri http://repo.percona.com/apt --distribution $DISTRIB_CODENAME --component main --include_src true\n\n\n\n\nNext, make the MySQL profile script, located at \nsites/profilfes/mysql/scripts/percona_server.sh\n:\n\n\nstdlib.title \nmysql/percona/server\n\n\nhostname=$(hostname | sed -e 's/_/\\\\\\_/g')\n\nstdlib.apt --package percona-server-server-5.6\n\nmysql.user --user root --host localhost --password password\nmysql.mycnf --filename \n/root/.my.cnf\n --user root --password password\n\nmysql.user --state absent --user root --host 127.0.0.1 --password \n\nmysql.user --state absent --user root --host ::1 --password \n\nmysql.user --state absent --user \n --host localhost --password \n\nmysql.user --state absent --user root --host $hostname --password \n\nmysql.user --state absent --user \n --host $hostname --password \n\n\nmysql.database --state absent --name test\n\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option bind-address --value 0.0.0.0\n\nif [[ $stdlib_state_change == true ]]; then\n  /etc/init.d/mysql restart\nfi\n\n\n\n\nThis script is rather simple in concept. Some notes about it:\n\n\n\n\nThe \nhostname\n variable is doing some shell escaping for MySQL commands.\n\n\nA \nroot@localhost\n user is being configured with the password set in the data file.\n\n\nMySQL installs several other default \nroot\n and \"blank\" users. We want to ensure these users are removed.\n\n\nWe also want to ensure that the \ntest\n database is removed.\n\n\nMySQL listens on localhost by default. We want it to listen on all interfaces, so we change the \nbind-address\n setting to \n0.0.0.0\n.\n\n\nThe special variable \n$stdlib_state_change\n will be \ntrue\n if any changes were made at all in the file. If they were, we want to restart the MySQL service. This will not happen if no changes were made.\n\n\n\n\nRoles\n\n\nFinally, combine the above Data and Profiles to build the role, located at \nsite/roles/mysql.sh\n:\n\n\nstdlib.enable_mysql\n\nstdlib.data mysql\n\nstdlib.profile mysql/percona_repo\nstdlib.profile mysql/percona_server\n\n\n\n\nThe \nstdlib.enable_mysql\n function is a special function that will source all of the relevant MySQL functions and resources located under \nlib\n.\n\n\nThe rest of the role should be self-explanatory.\n\n\nComments and Conclusion\n\n\nThe above example describes a simple way of deploying a Percona MySQL server using Waffles. It should be easy enough to modify and add other profiles to make a more well-rounded and robust service for you to use.", 
            "title": "Deploying a MySQL Server"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-server/#deploying-a-mysql-server", 
            "text": "", 
            "title": "Deploying a MySQL Server"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-server/#description", 
            "text": "This recipe will show one way of deploying a MySQL server with Waffles. In particular, Percona MySQL.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-server/#steps", 
            "text": "Data  There will only be one data item: the MySQL root password. This example will store the password in plain text -- note that a best practice would be to install it either in an encrypted repository, an encrypted string, or something along those lines.  $ cat site/data/mysql.sh\ndata_mysql_root_password= password   Profiles  We'll use two profile scripts for the MySQL server: the first will configure the Percona repo and the second will install and configure MySQL itself.  First, make the directory structure  $ mkdir -p site/profiles/mysql/scripts  Next, make the repo profile script, located at  site/profiles/mysql/scripts/percona_repo.sh :  stdlib.title  mysql/percona/repo \n\nsource /etc/lsb-release\n\nstdlib.apt_key --name percona --keyserver keys.gnupg.net --key 1C4CBDCDCD2EFD2A\nstdlib.apt_source --name percona --uri http://repo.percona.com/apt --distribution $DISTRIB_CODENAME --component main --include_src true  Next, make the MySQL profile script, located at  sites/profilfes/mysql/scripts/percona_server.sh :  stdlib.title  mysql/percona/server \n\nhostname=$(hostname | sed -e 's/_/\\\\\\_/g')\n\nstdlib.apt --package percona-server-server-5.6\n\nmysql.user --user root --host localhost --password password\nmysql.mycnf --filename  /root/.my.cnf  --user root --password password\n\nmysql.user --state absent --user root --host 127.0.0.1 --password  \nmysql.user --state absent --user root --host ::1 --password  \nmysql.user --state absent --user   --host localhost --password  \nmysql.user --state absent --user root --host $hostname --password  \nmysql.user --state absent --user   --host $hostname --password  \n\nmysql.database --state absent --name test\n\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option bind-address --value 0.0.0.0\n\nif [[ $stdlib_state_change == true ]]; then\n  /etc/init.d/mysql restart\nfi  This script is rather simple in concept. Some notes about it:   The  hostname  variable is doing some shell escaping for MySQL commands.  A  root@localhost  user is being configured with the password set in the data file.  MySQL installs several other default  root  and \"blank\" users. We want to ensure these users are removed.  We also want to ensure that the  test  database is removed.  MySQL listens on localhost by default. We want it to listen on all interfaces, so we change the  bind-address  setting to  0.0.0.0 .  The special variable  $stdlib_state_change  will be  true  if any changes were made at all in the file. If they were, we want to restart the MySQL service. This will not happen if no changes were made.   Roles  Finally, combine the above Data and Profiles to build the role, located at  site/roles/mysql.sh :  stdlib.enable_mysql\n\nstdlib.data mysql\n\nstdlib.profile mysql/percona_repo\nstdlib.profile mysql/percona_server  The  stdlib.enable_mysql  function is a special function that will source all of the relevant MySQL functions and resources located under  lib .  The rest of the role should be self-explanatory.", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-server/#comments-and-conclusion", 
            "text": "The above example describes a simple way of deploying a Percona MySQL server using Waffles. It should be easy enough to modify and add other profiles to make a more well-rounded and robust service for you to use.", 
            "title": "Comments and Conclusion"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-galera-cluster/", 
            "text": "Deploying a MySQL Galera Cluster\n\n\nDescription\n\n\nThis recipe will show one way of deploying a MySQL Galera cluster with Waffles. In particular, Percona XtraDB Cluster.\n\n\nSteps\n\n\nData\n\n\nThe data file will contain a few items:\n\n\n\n\nThe MySQL root password\n\n\nThe SST password\n\n\nThe name of the node which will act as the \"bootstrap\" node.\n\n\n\n\nThis example will store the password in plain text -- note that a best practice would be to install it either in an encrypted repository, an encrypted string, or something along those lines.\n\n\n$ cat site/data/mysql.sh\ndata_mysql_root_password=\npassword\n\ndata_mysql_sst_password=\npassword\n\ndata_galera_bootstrap_node=\nmysql-01\n\n\n\n\n\nProfiles\n\n\nWe'll use two profile scripts for the Galera cluster: the first will configure the Percona repo and the second will install and configure MySQL and Galera.\n\n\nFirst, make the directory structure\n\n\n$ mkdir -p site/profiles/mysql/scripts\n\n\n\n\nNext, make the repo profile script, located at \nsite/profiles/mysql/scripts/percona_repo.sh\n:\n\n\nstdlib.title \nmysql/percona/repo\n\n\nsource /etc/lsb-release\n\nstdlib.apt_key --name percona --keyserver keys.gnupg.net --key 1C4CBDCDCD2EFD2A\nstdlib.apt_source --name percona --uri http://repo.percona.com/apt --distribution $DISTRIB_CODENAME --component main --include_src true\n\n\n\n\nNext, make the MySQL profile script, located at \nsites/profiles/mysql/scripts/percona_xtradb_cluster.sh\n:\n\n\nstdlib.title \nmysql/percona/xtradb-cluster\n\n\n# Get some information useful for the configuration\nhostname=$(hostname)\nmysql_hostname=$(hostname | sed -e 's/_/\\\\\\_/g')\nmy_ip=$(/sbin/ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')\n\n# Install the percona cluster package\nstdlib.apt --package percona-xtradb-cluster-56\n\n# Record of the MySQL sysv service\nstdlib.sysvinit --name mysql\n\n# Configure the MySQL root user\nmysql.user --user root --host localhost --password \n$data_mysql_root_password\n\nmysql.mycnf --filename \n/root/.my.cnf\n --user root --password \n$data_mysql_root_password\n\n\n# Remove some of the default accounts\nmysql.user --state absent --user root --host 127.0.0.1 --password \n\nmysql.user --state absent --user root --host ::1 --password \n\nmysql.user --state absent --user \n --host localhost --password \n\nmysql.user --state absent --user root --host $mysql_hostname --password \n\nmysql.user --state absent --user \n --host $mysql_hostname --password \n\n\n# Create the sst user\nmysql.user --user sst --host localhost --password \n$data_mysql_sst_password\n\nmysql.grant --user sst --host localhost --database \n*\n --privileges \nRELOAD, LOCK TABLES, REPLICATION CLIENT\n\n\n# Configure `/etc/mysql/my.cnf`\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_provider --value /usr/lib/libgalera_smm.so\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_sst_method --value xtrabackup-v2\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option binlog_format --value ROW\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option default_storage_engine --value InnoDB\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option innodb_autoinc_lock_mode --value 2\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_node_address --value $my_ip\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_cluster_name --value my_cluster\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_sst_auth --value \nsst:${data_mysql_sst_password}\n\n\n# If the hostname is config_galera1, do not set gcomm\nif [[ $hostname == $data_galera_bootstrap_node ]]; then\n  stdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_cluster_address --value \ngcomm://\n\nelse\n  stdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_cluster_address --value \ngcomm://mysql-01,mysql-02,mysql-03\n\nfi\n\n# If any of the above settings changed, restart MySQL\nif [[ $stdlib_state_change == true ]]; then\n  /etc/init.d/mysql restart\nfi\n\n\n\n\nThis script may be a little long, but it shouldn't be difficult to understand. Some notes about it:\n\n\n\n\nThe \nhostname\n is captured to determine if the node should be the bootstrap node. It's also used for some MySQL configuration.\n\n\nA \nroot@localhost\n user is being configured with the password set in the data file.\n\n\nMySQL installs several other default \nroot\n and \"blank\" users. We want to ensure these users are removed.\n\n\nWe also want to ensure that the \ntest\n database is removed.\n\n\nMySQL listens on localhost by default. We want it to listen on all interfaces, so we change the \nbind-address\n setting to \n0.0.0.0\n.\n\n\nThe \nstdlib.ini\n resources are configuring MySQL, wsrep, and SST.\n\n\nIf the node is the bootstrap node, the \nwsrep_cluster_address\n is set to the special \ngcomm://\n. If not, it is set to all other nodes in the cluster. Once the cluster has been bootstrapped, you should remove the \nif\n conditional and only leave the \nelse\n portion.\n\n\nThe special variable \n$stdlib_state_change\n will be \ntrue\n if any changes were made at all in the file. If they were, we want to restart the MySQL service. This will not happen if no changes were made.\n\n\n\n\nRoles\n\n\nFinally, combine the above Data and Profiles to build the role, located at \nsite/roles/mysql.sh\n:\n\n\nstdlib.enable_mysql\n\nstdlib.data mysql\n\nstdlib.profile mysql/percona_repo\nstdlib.profile mysql/percona_xtradb_cluster\n\n\n\n\nThe \nstdlib.enable_mysql\n function is a special function that will source all of the relevant MySQL functions and resources located under \nlib\n.\n\n\nThe rest of the role should be self-explanatory.\n\n\nRun\n\n\nYou should now run this against 3 servers, containers, or virtual machines of your choice. The bootstrap node must be run and completed before all others.\n\n\nComments and Conclusion\n\n\nThe above example describes a simple way of deploying a Percona MySQL Galera cluster using Waffles. It should be easy enough to modify and add other profiles to make a more well-rounded and robust service for you to use.\n\n\nPlease be aware that \nmysql-01\n, \nmysql-02\n, and \nmysql-03\n are all hostnames that can be resolved. If you are unable to add these to a DNS service, use IP addresses for testing.", 
            "title": "Deploying a MySQL Galera Cluster"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-galera-cluster/#deploying-a-mysql-galera-cluster", 
            "text": "", 
            "title": "Deploying a MySQL Galera Cluster"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-galera-cluster/#description", 
            "text": "This recipe will show one way of deploying a MySQL Galera cluster with Waffles. In particular, Percona XtraDB Cluster.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-galera-cluster/#steps", 
            "text": "Data  The data file will contain a few items:   The MySQL root password  The SST password  The name of the node which will act as the \"bootstrap\" node.   This example will store the password in plain text -- note that a best practice would be to install it either in an encrypted repository, an encrypted string, or something along those lines.  $ cat site/data/mysql.sh\ndata_mysql_root_password= password \ndata_mysql_sst_password= password \ndata_galera_bootstrap_node= mysql-01   Profiles  We'll use two profile scripts for the Galera cluster: the first will configure the Percona repo and the second will install and configure MySQL and Galera.  First, make the directory structure  $ mkdir -p site/profiles/mysql/scripts  Next, make the repo profile script, located at  site/profiles/mysql/scripts/percona_repo.sh :  stdlib.title  mysql/percona/repo \n\nsource /etc/lsb-release\n\nstdlib.apt_key --name percona --keyserver keys.gnupg.net --key 1C4CBDCDCD2EFD2A\nstdlib.apt_source --name percona --uri http://repo.percona.com/apt --distribution $DISTRIB_CODENAME --component main --include_src true  Next, make the MySQL profile script, located at  sites/profiles/mysql/scripts/percona_xtradb_cluster.sh :  stdlib.title  mysql/percona/xtradb-cluster \n\n# Get some information useful for the configuration\nhostname=$(hostname)\nmysql_hostname=$(hostname | sed -e 's/_/\\\\\\_/g')\nmy_ip=$(/sbin/ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}')\n\n# Install the percona cluster package\nstdlib.apt --package percona-xtradb-cluster-56\n\n# Record of the MySQL sysv service\nstdlib.sysvinit --name mysql\n\n# Configure the MySQL root user\nmysql.user --user root --host localhost --password  $data_mysql_root_password \nmysql.mycnf --filename  /root/.my.cnf  --user root --password  $data_mysql_root_password \n\n# Remove some of the default accounts\nmysql.user --state absent --user root --host 127.0.0.1 --password  \nmysql.user --state absent --user root --host ::1 --password  \nmysql.user --state absent --user   --host localhost --password  \nmysql.user --state absent --user root --host $mysql_hostname --password  \nmysql.user --state absent --user   --host $mysql_hostname --password  \n\n# Create the sst user\nmysql.user --user sst --host localhost --password  $data_mysql_sst_password \nmysql.grant --user sst --host localhost --database  *  --privileges  RELOAD, LOCK TABLES, REPLICATION CLIENT \n\n# Configure `/etc/mysql/my.cnf`\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_provider --value /usr/lib/libgalera_smm.so\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_sst_method --value xtrabackup-v2\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option binlog_format --value ROW\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option default_storage_engine --value InnoDB\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option innodb_autoinc_lock_mode --value 2\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_node_address --value $my_ip\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_cluster_name --value my_cluster\nstdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_sst_auth --value  sst:${data_mysql_sst_password} \n\n# If the hostname is config_galera1, do not set gcomm\nif [[ $hostname == $data_galera_bootstrap_node ]]; then\n  stdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_cluster_address --value  gcomm:// \nelse\n  stdlib.ini --file /etc/mysql/my.cnf --section mysqld --option wsrep_cluster_address --value  gcomm://mysql-01,mysql-02,mysql-03 \nfi\n\n# If any of the above settings changed, restart MySQL\nif [[ $stdlib_state_change == true ]]; then\n  /etc/init.d/mysql restart\nfi  This script may be a little long, but it shouldn't be difficult to understand. Some notes about it:   The  hostname  is captured to determine if the node should be the bootstrap node. It's also used for some MySQL configuration.  A  root@localhost  user is being configured with the password set in the data file.  MySQL installs several other default  root  and \"blank\" users. We want to ensure these users are removed.  We also want to ensure that the  test  database is removed.  MySQL listens on localhost by default. We want it to listen on all interfaces, so we change the  bind-address  setting to  0.0.0.0 .  The  stdlib.ini  resources are configuring MySQL, wsrep, and SST.  If the node is the bootstrap node, the  wsrep_cluster_address  is set to the special  gcomm:// . If not, it is set to all other nodes in the cluster. Once the cluster has been bootstrapped, you should remove the  if  conditional and only leave the  else  portion.  The special variable  $stdlib_state_change  will be  true  if any changes were made at all in the file. If they were, we want to restart the MySQL service. This will not happen if no changes were made.   Roles  Finally, combine the above Data and Profiles to build the role, located at  site/roles/mysql.sh :  stdlib.enable_mysql\n\nstdlib.data mysql\n\nstdlib.profile mysql/percona_repo\nstdlib.profile mysql/percona_xtradb_cluster  The  stdlib.enable_mysql  function is a special function that will source all of the relevant MySQL functions and resources located under  lib .  The rest of the role should be self-explanatory.", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-galera-cluster/#run", 
            "text": "You should now run this against 3 servers, containers, or virtual machines of your choice. The bootstrap node must be run and completed before all others.", 
            "title": "Run"
        }, 
        {
            "location": "/cookbook/deploying-a-mysql-galera-cluster/#comments-and-conclusion", 
            "text": "The above example describes a simple way of deploying a Percona MySQL Galera cluster using Waffles. It should be easy enough to modify and add other profiles to make a more well-rounded and robust service for you to use.  Please be aware that  mysql-01 ,  mysql-02 , and  mysql-03  are all hostnames that can be resolved. If you are unable to add these to a DNS service, use IP addresses for testing.", 
            "title": "Comments and Conclusion"
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/", 
            "text": "Deploying a Consul Cluster\n\n\nDescription\n\n\nThis recipe will show one way of deploying a Consul cluster with Waffles.\n\n\nSteps\n\n\nData\n\n\nThe data file will have the version of Consul to install, a secret key for the cluster, the nodes that are in the cluster, and an associative array of Consul settings.\n\n\n$ cat site/data/consul.sh\n# Consul Version\ndata_consul_version=\n0.5.2\n\n\n# Secret key\ndata_consul_key=\njXwOaTXJFf4//4QGrpONBg==\n\n\n# Nodes in the cluster\ndata_consul_nodes=(\n  consul-01\n  consul-02\n  consul-03\n)\n\n# Bootstrap node\ndata_consul_bootstrap_node=\nconsul-03\n\n\n# Consul config\ndeclare -Ag data_consul_config\ndata_consul_config=(\n  [server]=\ntrue\n\n  [bootstrap_expect]=\n${#data_consul_nodes[@]}\n\n  [client_addr]=\n0.0.0.0\n\n  [datacenter]=\nhonolulu\n\n  [data_dir]=\n/var/lib/consul\n\n  [encrypt]=\n${data_consul_key}\n\n  [enable_syslog]=\ntrue\n\n  [log_level]=\nINFO\n\n)\n\n\n\n\nProfiles\n\n\nBase Packages\n\n\nIn order to successfully execute the other profiles, we'll need to ensure the Consul server has a few base packages installed. Create \nsite/profiles/common/scripts/packages.sh\n with the following contents:\n\n\nstdlib.apt --package wget\nstdlib.apt --package software-properties-common\n\n\n\n\nConsul\n\n\nWe'll use two profile scripts for the Consul cluster: the first will install Consul and the second will set up the Consul cluster.\n\n\nFirst, make the directory structure\n\n\n$ mkdir -p site/profiles/consul/scripts\n\n\n\n\nNext, make the repo profile script, located at \nsite/profiles/consul/scripts/install.sh\n:\n\n\nstdlib.title \nprofiles/consul/install\n\n\nstdlib.apt --package unzip\n\nstdlib.useradd --user consul --homedir /var/lib/consul --createhome true\nstdlib.directory --name /etc/consul.d --owner consul --group consul\n\nif [[ ! -f /usr/local/bin/consul ]]; then\n  stdlib.mute pushd /tmp\n  stdlib.capture_error wget https://dl.bintray.com/mitchellh/consul/${data_consul_version}_linux_amd64.zip\n  stdlib.capture_error unzip ${data_consul_version}_linux_amd64.zip\n  stdlib.capture_error mv consul /usr/local/bin\n  stdlib.mute popd\nfi\n\n\n\n\nThis install script is rather simple. It's doing the following:\n\n\n\n\nInstalls the \nunzip\n package\n\n\nCreates a \nconsul\n system user with a homedir of \n/var/lib/consul\n\n\nDownloads the Consul binary of the version we specified in the data\n\n\nUnzips it and installs it to \n/usr/local/bin\n.\n\n\n\n\nNote: the way this script determines if Consul is installed is by the presence of the \n/usr/local/bin/consul\n file. If this method is too simplistic for you, feel free to package Consul into a \ndeb\n or \nrpm\n package.\n\n\nNext, make the Consul server script, located at \nsites/profiles/consul/scripts/server.sh\n:\n\n\nstdlib.title \nprofiles/consul/server\n\n\nstdlib.file --name /etc/init/consul.conf --source \n$WAFFLES_SITE_DIR/profiles/consul/files/consul.conf\n\n\nfor key in \n${!data_consul_config[@]}\n; do\n  augeas.json_dict --file /etc/consul.d/config.json --path / --key \n$key\n --value \n${data_consul_config[$key]}\n\ndone\n\nstdlib.upstart --name consul --state running\n\nhostname=$(hostname)\nif [[ $hostname == $data_consul_bootstrap_node ]]; then\n  sleep 10\n  for i in \n${data_consul_nodes[@]}\n; do\n    if [[ $hostname != $i ]]; then\n      /usr/local/bin/consul join $i\n    fi\n  done\nfi\n\n\n\n\n\nHere are some notes on the above:\n\n\n\n\nstdlib.file\n is able to copy a static file from \nsite/profiles/consul/files\n. It is \nhighly\n recommended to bundle your static files into the profile that they are being called from. This ensures that they get copied to the remote node during remote deployment. Alternatively, while there are not yet resources for commands such as \nscp\n or \nwget\n, you could use them similarly to how the Consul zip file was downloaded.\n\n\naugeas.json_dict\n is an Augeas-based resource that allows JSON files to be built on the command-line. In order to use Augeas, it must be installed. See the next section.\n\n\nstdlib.upstart\n ensures that the Consul service is running.\n\n\n\n\nFinally, the \nfor\n loop will run if the node is the bootstrap node. It'll loop through all other existing nodes and join them. The existing nodes must be up and running first, which is why the bootstrap node was set to the last node in the cluster.\n\n\nFinally, create \nsite/profiles/consul/files/consul.conf\n with the following content:\n\n\ndescription \nConsul agent\n\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nscript\n  if [ -f \n/etc/default/consul\n ]; then\n    # Gives us the CONSUL_FLAGS variable\n    . /etc/default/consul\n  fi\n\n  # Make sure to use all our CPUs, because Consul can block a scheduler thread\n  export GOMAXPROCS=`nproc`\n\n  exec /usr/local/bin/consul agent \\\n    -config-dir=\n/etc/consul.d\n \\\n    ${CONSUL_FLAGS} \\\n    \n/var/log/consul.log 2\n1\nend script\n\n\n\n\nAugeas\n\n\nTo install Augeas, create \nsite/profiles/augeas/scripts/install_apt.sh\n with the following content:\n\n\nstdlib.title \nprofiles/augeas/install_apt\n\n\nstdlib.apt_ppa --ppa raphink/augeas\nstdlib.apt --package augeas-tools --version latest\n\n\n\n\nRoles\n\n\nFinally, combine the above Data and Profiles to build the role, located at \nsite/roles/consul.sh\n:\n\n\nstdlib.enable_augeas\n\nstdlib.data consul\n\nstdlib.profile common/packages\nstdlib.profile augeas/install_apt\nstdlib.profile consul/install\nstdlib.profile consul/server\n\n\n\n\nThe \nstdlib.enable_augeas\n function is a special function that will source all of the relevant Augeas functions and resources located under \nlib\n.\n\n\nThe rest of the role should be self-explanatory.\n\n\nRun\n\n\nYou should now run this against 3 servers, containers, or virtual machines of your choice.\n\n\nComments and Conclusion\n\n\nThe above example describes a simple way of deploying a Consul cluster using Waffles. It should be easy enough to modify and add other profiles to make a more well-rounded and robust service for you to use.\n\n\nPlease be aware that \nconsul-01\n, \nconsul-02\n, and \nconsul-03\n are all hostnames that can be resolved. If you are unable to add these to a DNS service, use IP addresses for testing.", 
            "title": "Deploying a Consul Cluster"
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/#deploying-a-consul-cluster", 
            "text": "", 
            "title": "Deploying a Consul Cluster"
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/#description", 
            "text": "This recipe will show one way of deploying a Consul cluster with Waffles.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/#steps", 
            "text": "Data  The data file will have the version of Consul to install, a secret key for the cluster, the nodes that are in the cluster, and an associative array of Consul settings.  $ cat site/data/consul.sh\n# Consul Version\ndata_consul_version= 0.5.2 \n\n# Secret key\ndata_consul_key= jXwOaTXJFf4//4QGrpONBg== \n\n# Nodes in the cluster\ndata_consul_nodes=(\n  consul-01\n  consul-02\n  consul-03\n)\n\n# Bootstrap node\ndata_consul_bootstrap_node= consul-03 \n\n# Consul config\ndeclare -Ag data_consul_config\ndata_consul_config=(\n  [server]= true \n  [bootstrap_expect]= ${#data_consul_nodes[@]} \n  [client_addr]= 0.0.0.0 \n  [datacenter]= honolulu \n  [data_dir]= /var/lib/consul \n  [encrypt]= ${data_consul_key} \n  [enable_syslog]= true \n  [log_level]= INFO \n)  Profiles  Base Packages  In order to successfully execute the other profiles, we'll need to ensure the Consul server has a few base packages installed. Create  site/profiles/common/scripts/packages.sh  with the following contents:  stdlib.apt --package wget\nstdlib.apt --package software-properties-common  Consul  We'll use two profile scripts for the Consul cluster: the first will install Consul and the second will set up the Consul cluster.  First, make the directory structure  $ mkdir -p site/profiles/consul/scripts  Next, make the repo profile script, located at  site/profiles/consul/scripts/install.sh :  stdlib.title  profiles/consul/install \n\nstdlib.apt --package unzip\n\nstdlib.useradd --user consul --homedir /var/lib/consul --createhome true\nstdlib.directory --name /etc/consul.d --owner consul --group consul\n\nif [[ ! -f /usr/local/bin/consul ]]; then\n  stdlib.mute pushd /tmp\n  stdlib.capture_error wget https://dl.bintray.com/mitchellh/consul/${data_consul_version}_linux_amd64.zip\n  stdlib.capture_error unzip ${data_consul_version}_linux_amd64.zip\n  stdlib.capture_error mv consul /usr/local/bin\n  stdlib.mute popd\nfi  This install script is rather simple. It's doing the following:   Installs the  unzip  package  Creates a  consul  system user with a homedir of  /var/lib/consul  Downloads the Consul binary of the version we specified in the data  Unzips it and installs it to  /usr/local/bin .   Note: the way this script determines if Consul is installed is by the presence of the  /usr/local/bin/consul  file. If this method is too simplistic for you, feel free to package Consul into a  deb  or  rpm  package.  Next, make the Consul server script, located at  sites/profiles/consul/scripts/server.sh :  stdlib.title  profiles/consul/server \n\nstdlib.file --name /etc/init/consul.conf --source  $WAFFLES_SITE_DIR/profiles/consul/files/consul.conf \n\nfor key in  ${!data_consul_config[@]} ; do\n  augeas.json_dict --file /etc/consul.d/config.json --path / --key  $key  --value  ${data_consul_config[$key]} \ndone\n\nstdlib.upstart --name consul --state running\n\nhostname=$(hostname)\nif [[ $hostname == $data_consul_bootstrap_node ]]; then\n  sleep 10\n  for i in  ${data_consul_nodes[@]} ; do\n    if [[ $hostname != $i ]]; then\n      /usr/local/bin/consul join $i\n    fi\n  done\nfi  Here are some notes on the above:   stdlib.file  is able to copy a static file from  site/profiles/consul/files . It is  highly  recommended to bundle your static files into the profile that they are being called from. This ensures that they get copied to the remote node during remote deployment. Alternatively, while there are not yet resources for commands such as  scp  or  wget , you could use them similarly to how the Consul zip file was downloaded.  augeas.json_dict  is an Augeas-based resource that allows JSON files to be built on the command-line. In order to use Augeas, it must be installed. See the next section.  stdlib.upstart  ensures that the Consul service is running.", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/#finally-the-for-loop-will-run-if-the-node-is-the-bootstrap-node-itll-loop-through-all-other-existing-nodes-and-join-them-the-existing-nodes-must-be-up-and-running-first-which-is-why-the-bootstrap-node-was-set-to-the-last-node-in-the-cluster", 
            "text": "Finally, create  site/profiles/consul/files/consul.conf  with the following content:  description  Consul agent \n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nscript\n  if [ -f  /etc/default/consul  ]; then\n    # Gives us the CONSUL_FLAGS variable\n    . /etc/default/consul\n  fi\n\n  # Make sure to use all our CPUs, because Consul can block a scheduler thread\n  export GOMAXPROCS=`nproc`\n\n  exec /usr/local/bin/consul agent \\\n    -config-dir= /etc/consul.d  \\\n    ${CONSUL_FLAGS} \\\n     /var/log/consul.log 2 1\nend script  Augeas  To install Augeas, create  site/profiles/augeas/scripts/install_apt.sh  with the following content:  stdlib.title  profiles/augeas/install_apt \n\nstdlib.apt_ppa --ppa raphink/augeas\nstdlib.apt --package augeas-tools --version latest  Roles  Finally, combine the above Data and Profiles to build the role, located at  site/roles/consul.sh :  stdlib.enable_augeas\n\nstdlib.data consul\n\nstdlib.profile common/packages\nstdlib.profile augeas/install_apt\nstdlib.profile consul/install\nstdlib.profile consul/server  The  stdlib.enable_augeas  function is a special function that will source all of the relevant Augeas functions and resources located under  lib .  The rest of the role should be self-explanatory.", 
            "title": "Finally, the for loop will run if the node is the bootstrap node. It'll loop through all other existing nodes and join them. The existing nodes must be up and running first, which is why the bootstrap node was set to the last node in the cluster."
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/#run", 
            "text": "You should now run this against 3 servers, containers, or virtual machines of your choice.", 
            "title": "Run"
        }, 
        {
            "location": "/cookbook/deploying-a-consul-cluster/#comments-and-conclusion", 
            "text": "The above example describes a simple way of deploying a Consul cluster using Waffles. It should be easy enough to modify and add other profiles to make a more well-rounded and robust service for you to use.  Please be aware that  consul-01 ,  consul-02 , and  consul-03  are all hostnames that can be resolved. If you are unable to add these to a DNS service, use IP addresses for testing.", 
            "title": "Comments and Conclusion"
        }, 
        {
            "location": "/cookbook/override-data/", 
            "text": "Override Data\n\n\nDescription\n\n\nThis recipe will show how to easily override data in two different data files\n\n\nSteps\n\n\n\n\nCreate the initial data file:\n\n\n\n\n$ cat site/data/common.sh \nEOF\ndata_memcached_uid=\n999\n\nEOF\n\n\n\n\n\n\nCreate the second data file:\n\n\n\n\n$ cat site/data/memcached.sh \nEOF\ndata_memcached_uid=\n700\n\nEOF\n\n\n\n\n\n\nAdd both data files to your role. The file called last will take precedence:\n\n\n\n\nsite.data common\nsite.data memcached\n\n\n\n\nComments\n\n\nThis is useful for when you want to keep data that can be used across multiple roles in a single file, but some roles need individual pieces of data overridden. A common case for this is when you are introducing a configuration management system into an existing environment and something like user UIDs have not been made standard.", 
            "title": "Overriding Data"
        }, 
        {
            "location": "/cookbook/override-data/#override-data", 
            "text": "", 
            "title": "Override Data"
        }, 
        {
            "location": "/cookbook/override-data/#description", 
            "text": "This recipe will show how to easily override data in two different data files", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/override-data/#steps", 
            "text": "Create the initial data file:   $ cat site/data/common.sh  EOF\ndata_memcached_uid= 999 \nEOF   Create the second data file:   $ cat site/data/memcached.sh  EOF\ndata_memcached_uid= 700 \nEOF   Add both data files to your role. The file called last will take precedence:   site.data common\nsite.data memcached", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/override-data/#comments", 
            "text": "This is useful for when you want to keep data that can be used across multiple roles in a single file, but some roles need individual pieces of data overridden. A common case for this is when you are introducing a configuration management system into an existing environment and something like user UIDs have not been made standard.", 
            "title": "Comments"
        }, 
        {
            "location": "/cookbook/referencing-data-from-data/", 
            "text": "Referencing Data from Data Files\n\n\nDescription\n\n\nThis recipe will show how you can reference previously declared data in subsequent data files.\n\n\nSteps\n\n\n\n\nCreate an initial data file:\n\n\n\n\n$ cat \n site/data/common.sh \nEOF\ndata_common_packages=(\n  \nvim\n\n  \ntmux\n\n)\nEOF\n\n\n\n\n\n\nCreate a second data file that references data from the first:\n\n\n\n\n$ cat \n site/data/memcached.sh \nEOF\ndata_common_packages=(\n  \nhtop\n\n  \n${data_common_packages[@]}\n\n)\nEOF\n\n\n\n\n\n\nDeclare the data files in order in your role:\n\n\n\n\nstdlib.data common\nstdlib.data memcached\n\n\n\n\nComments\n\n\nThis is possible because data files are just regular Bash scripts. The variables that have been sourced earlier in the chain are naturally available to files later in the chain. By using regular Bash syntax, you can manipulate the available data in any legal way.", 
            "title": "Referencing Data from Data"
        }, 
        {
            "location": "/cookbook/referencing-data-from-data/#referencing-data-from-data-files", 
            "text": "", 
            "title": "Referencing Data from Data Files"
        }, 
        {
            "location": "/cookbook/referencing-data-from-data/#description", 
            "text": "This recipe will show how you can reference previously declared data in subsequent data files.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/referencing-data-from-data/#steps", 
            "text": "Create an initial data file:   $ cat   site/data/common.sh  EOF\ndata_common_packages=(\n   vim \n   tmux \n)\nEOF   Create a second data file that references data from the first:   $ cat   site/data/memcached.sh  EOF\ndata_common_packages=(\n   htop \n   ${data_common_packages[@]} \n)\nEOF   Declare the data files in order in your role:   stdlib.data common\nstdlib.data memcached", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/referencing-data-from-data/#comments", 
            "text": "This is possible because data files are just regular Bash scripts. The variables that have been sourced earlier in the chain are naturally available to files later in the chain. By using regular Bash syntax, you can manipulate the available data in any legal way.", 
            "title": "Comments"
        }, 
        {
            "location": "/cookbook/testing-with-test-kitchen/", 
            "text": "Testing With Test Kitchen\n\n\nDescription\n\n\nThis recipe will show how to set up Test Kitchen so you can run various acceptance and integration tests on Waffles.\n\n\nSteps\n\n\n\n\n\n\nProvision a virtual machine that will be used for Test Kitchen.\n\n\n\n\n\n\nRun the following commands:\n\n\n\n\n\n\napt-get update\napt-get install -y ruby\nwget -qO- https://get.docker.com/\ngem install test-kitchen\ngem install kitchen-docker\ngem install busser-bash\ngem install busser-bats\ngem install busser-serverspec\nkitchen init --driver=kitchen-docker\n\n\n\n\n\n\n\n\nDownload Waffles to \n/root/.waffles\n.\n\n\n\n\n\n\nThe \n/root/.waffles/kitchen\n directory contains everything you need to get started with testing. Review \n/root/.waffles/kitchen/.kitchen.yml\n and make any necessary changes.\n\n\n\n\n\n\nType the following command to run all tests:\n\n\n\n\n\n\ncd /root/.waffles/kitchen\nkitchen test\n\n\n\n\nComments\n\n\nFor information on how to use Test Kitchen, see the \nTest Kitchen\n home page.", 
            "title": "Testing Waffles with Test Kitchen"
        }, 
        {
            "location": "/cookbook/testing-with-test-kitchen/#testing-with-test-kitchen", 
            "text": "", 
            "title": "Testing With Test Kitchen"
        }, 
        {
            "location": "/cookbook/testing-with-test-kitchen/#description", 
            "text": "This recipe will show how to set up Test Kitchen so you can run various acceptance and integration tests on Waffles.", 
            "title": "Description"
        }, 
        {
            "location": "/cookbook/testing-with-test-kitchen/#steps", 
            "text": "Provision a virtual machine that will be used for Test Kitchen.    Run the following commands:    apt-get update\napt-get install -y ruby\nwget -qO- https://get.docker.com/\ngem install test-kitchen\ngem install kitchen-docker\ngem install busser-bash\ngem install busser-bats\ngem install busser-serverspec\nkitchen init --driver=kitchen-docker    Download Waffles to  /root/.waffles .    The  /root/.waffles/kitchen  directory contains everything you need to get started with testing. Review  /root/.waffles/kitchen/.kitchen.yml  and make any necessary changes.    Type the following command to run all tests:    cd /root/.waffles/kitchen\nkitchen test", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/testing-with-test-kitchen/#comments", 
            "text": "For information on how to use Test Kitchen, see the  Test Kitchen  home page.", 
            "title": "Comments"
        }, 
        {
            "location": "/cookbook/waffles-and-lxc/", 
            "text": "Using Waffles with LXC\n\n\nThis recipe will describe how to configure LXC containers with Waffles.\n\n\nSteps\n\n\nInstalling LXC\n\n\nFirst, set up an LXC server. I've written a blog post \nhere\n that may be used as a reference.\n\n\nCreating a Base Container\n\n\nI find it very useful to have a standard container that's used as the basis for all other containers. If anything, it makes the creation of new containers almost instant since cloning a container is much quicker than creating an entirely new container.\n\n\nTo create a base container, just create a standard container and turn it off with \nlxc-stop\n.\n\n\nWaffles LXC Script\n\n\nI've been using the following script for the past few months and find it works very well. Comments and improvements are definitely welcome, though.\n\n\n#!/bin/bash\n\nif [ -z $1 ]; then\n  echo \nRole required.\n\n  exit 1\nfi\n\nlxc-ls | grep -q waffles_$1\nif [ $? == 0 ]; then\n  echo \nShutting down and destroying waffles_$1\n\n  lxc-stop -n waffles_$1\n  lxc-destroy -n waffles_$1\nfi\n\necho \nCloning LXC container waffles_base to waffles_$1\n\nlxc-clone -o waffles_base -n waffles_$1 -s\n\necho \nCopying root key to container\n\nmkdir /var/lib/lxc/waffles_$1/rootfs/root/.ssh\ncat /root/.ssh/id_rsa.pub \n /var/lib/lxc/waffles_$1/rootfs/root/.ssh/authorized_keys\n\necho \nStarting waffles_$1 and waiting until it has an IP\n\nlxc-start -d -n waffles_$1\n\nrunning=false\nwhile [ \n$running\n == false ]; do\n  lxc-info -i -n waffles_$1 | grep -q 10\n  if [ $? == 0 ]; then\n    ip=$(lxc-info -i -n waffles_$1 | awk '{print $2}')\n    running=true\n  else\n    echo \nwaffles_$1 not up yet. Sleeping...\n\n    sleep 2\n  fi\ndone\n\ngrep -q waffles_$1 /etc/hosts\nif [ $? == 0 ]; then\n  sed -i -e \n/waffles_$1/d\n /etc/hosts\nfi\necho \n$ip waffles_$1\n \n /etc/hosts\n\npkill -HUP dnsmasq\n\necho \nRunning waffles\n\nlxc-attach -n waffles_$1 -- apt-get update\nlxc-attach -n waffles_$1 -- apt-get install -y rsync\ncd /root/.waffles \n bash waffles.sh -s waffles_$1 -r $1\n\n\n\n\nThis script assumes the following:\n\n\n\n\nYou have a base container called \nwaffles_base\n.\n\n\nYou have Waffles installed under \n/root/.waffles\n.\n\n\n\n\nTo use this script, run it like so:\n\n\n$ waffles_lxc.sh memcached\n\n\n\n\nThe script will then clone \nwaffles_base\n as \nwaffles_memcached\n and create an \n/etc/hosts\n entry for it so all other containers can reference it by name.\n\n\nIf you'd prefer not to have all containers prefixed with \nwaffles_\n, just edit the script.\n\n\nConclusion\n\n\nThis recipe detailed one way of using Waffles with LXC by using a simple Bash script that automates the creation of a container and applies a role to it using Waffles.", 
            "title": "Waffles and LXC"
        }, 
        {
            "location": "/cookbook/waffles-and-lxc/#using-waffles-with-lxc", 
            "text": "This recipe will describe how to configure LXC containers with Waffles.", 
            "title": "Using Waffles with LXC"
        }, 
        {
            "location": "/cookbook/waffles-and-lxc/#steps", 
            "text": "Installing LXC  First, set up an LXC server. I've written a blog post  here  that may be used as a reference.  Creating a Base Container  I find it very useful to have a standard container that's used as the basis for all other containers. If anything, it makes the creation of new containers almost instant since cloning a container is much quicker than creating an entirely new container.  To create a base container, just create a standard container and turn it off with  lxc-stop .  Waffles LXC Script  I've been using the following script for the past few months and find it works very well. Comments and improvements are definitely welcome, though.  #!/bin/bash\n\nif [ -z $1 ]; then\n  echo  Role required. \n  exit 1\nfi\n\nlxc-ls | grep -q waffles_$1\nif [ $? == 0 ]; then\n  echo  Shutting down and destroying waffles_$1 \n  lxc-stop -n waffles_$1\n  lxc-destroy -n waffles_$1\nfi\n\necho  Cloning LXC container waffles_base to waffles_$1 \nlxc-clone -o waffles_base -n waffles_$1 -s\n\necho  Copying root key to container \nmkdir /var/lib/lxc/waffles_$1/rootfs/root/.ssh\ncat /root/.ssh/id_rsa.pub   /var/lib/lxc/waffles_$1/rootfs/root/.ssh/authorized_keys\n\necho  Starting waffles_$1 and waiting until it has an IP \nlxc-start -d -n waffles_$1\n\nrunning=false\nwhile [  $running  == false ]; do\n  lxc-info -i -n waffles_$1 | grep -q 10\n  if [ $? == 0 ]; then\n    ip=$(lxc-info -i -n waffles_$1 | awk '{print $2}')\n    running=true\n  else\n    echo  waffles_$1 not up yet. Sleeping... \n    sleep 2\n  fi\ndone\n\ngrep -q waffles_$1 /etc/hosts\nif [ $? == 0 ]; then\n  sed -i -e  /waffles_$1/d  /etc/hosts\nfi\necho  $ip waffles_$1    /etc/hosts\n\npkill -HUP dnsmasq\n\necho  Running waffles \nlxc-attach -n waffles_$1 -- apt-get update\nlxc-attach -n waffles_$1 -- apt-get install -y rsync\ncd /root/.waffles   bash waffles.sh -s waffles_$1 -r $1  This script assumes the following:   You have a base container called  waffles_base .  You have Waffles installed under  /root/.waffles .   To use this script, run it like so:  $ waffles_lxc.sh memcached  The script will then clone  waffles_base  as  waffles_memcached  and create an  /etc/hosts  entry for it so all other containers can reference it by name.  If you'd prefer not to have all containers prefixed with  waffles_ , just edit the script.", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/waffles-and-lxc/#conclusion", 
            "text": "This recipe detailed one way of using Waffles with LXC by using a simple Bash script that automates the creation of a container and applies a role to it using Waffles.", 
            "title": "Conclusion"
        }, 
        {
            "location": "/cookbook/waffles-and-terraform/", 
            "text": "Using Waffles with Terraform\n\n\nThis recipe will show how to use Waffles with \nTerraform\n. The Terraform OpenStack provider will be used, but these concepts should be applicable to any provider.\n\n\nSteps\n\n\nInstalling Terraform\n\n\nFirst, set up and install Terraform. Instructions can be found on Terraform's \nhomepage\n.\n\n\nCreating a Terraform Configuration\n\n\nThe following Terraform Configuration is all that is required to use Waffles with Terraform:\n\n\nresource \nopenstack_compute_keypair_v2\n \nwaffles\n {\n  name = \nwaffles\n\n  public_key = \n${file(\n/root/.ssh/id_rsa.pub\n)}\n\n}\n\nresource \nopenstack_compute_instance_v2\n \nwaffles\n {\n  name = \nwaffles\n\n  image_name = \nUbuntu 14.04\n\n  flavor_name = \nm1.tiny\n\n\n  key_pair = \n${openstack_compute_keypair_v2.waffles.name}\n\n  security_groups = [\ndefault\n]\n\n  connection {\n    user = \nubuntu\n\n    key_file = \n/root/.ssh/id_rsa\n\n    host = \n${openstack_compute_instance_v2.waffles.access_ip_v6}\n\n  }\n\n  provisioner \nlocal-exec\n {\n    command = \nsleep 10 \n cd /root/.waffles \n bash waffles.sh -r memcached -s ${openstack_compute_instance_v2.waffles.access_ip_v6} -u ubuntu -y\n\n  }\n\n}\n\n\n\n\nSave the above as something like \n~/waffles-tform/main.tf\n\n\nApply the Terraform Configuration\n\n\nNow just apply the configuration with:\n\n\n$ cd waffles-tform\n$ terraform apply\n\n\n\n\nComments\n\n\nThe above configuration makes a few assumptions:\n\n\n\n\nrsync\n is already installed on the image you'll be using. If yours doesn't, use \ncloud-init\n or a similar system to pre-install it.\n\n\nThe virtual machine that Terraform creates is accessible via IPv6. If yours isn't, either attach a Floating or Elastic IP or use the fixed IP somehow.\n\n\nThe SSH key being used is \n/root/.ssh/id_rsa\n. This is because Waffles does not support non-default SSH keys yet.\n\n\nSSH access is allowed through the security group.\n\n\n\n\nConclusion\n\n\nThis recipe showed one way of using Waffles with Terraform. Both systems are extremely flexible and complement each other well, so there may be other ways of achieving the same result.\n\n\nFor example, you could use Terraform's \nfile\n provisioner to copy the entire \n~/.waffles\n directory to the remote virtual machine. The benefit of using Waffles's built-in push is that only the files which the role requires are copied over.", 
            "title": "Waffles and Terraform"
        }, 
        {
            "location": "/cookbook/waffles-and-terraform/#using-waffles-with-terraform", 
            "text": "This recipe will show how to use Waffles with  Terraform . The Terraform OpenStack provider will be used, but these concepts should be applicable to any provider.", 
            "title": "Using Waffles with Terraform"
        }, 
        {
            "location": "/cookbook/waffles-and-terraform/#steps", 
            "text": "Installing Terraform  First, set up and install Terraform. Instructions can be found on Terraform's  homepage .  Creating a Terraform Configuration  The following Terraform Configuration is all that is required to use Waffles with Terraform:  resource  openstack_compute_keypair_v2   waffles  {\n  name =  waffles \n  public_key =  ${file( /root/.ssh/id_rsa.pub )} \n}\n\nresource  openstack_compute_instance_v2   waffles  {\n  name =  waffles \n  image_name =  Ubuntu 14.04 \n  flavor_name =  m1.tiny \n\n  key_pair =  ${openstack_compute_keypair_v2.waffles.name} \n  security_groups = [ default ]\n\n  connection {\n    user =  ubuntu \n    key_file =  /root/.ssh/id_rsa \n    host =  ${openstack_compute_instance_v2.waffles.access_ip_v6} \n  }\n\n  provisioner  local-exec  {\n    command =  sleep 10   cd /root/.waffles   bash waffles.sh -r memcached -s ${openstack_compute_instance_v2.waffles.access_ip_v6} -u ubuntu -y \n  }\n\n}  Save the above as something like  ~/waffles-tform/main.tf  Apply the Terraform Configuration  Now just apply the configuration with:  $ cd waffles-tform\n$ terraform apply", 
            "title": "Steps"
        }, 
        {
            "location": "/cookbook/waffles-and-terraform/#comments", 
            "text": "The above configuration makes a few assumptions:   rsync  is already installed on the image you'll be using. If yours doesn't, use  cloud-init  or a similar system to pre-install it.  The virtual machine that Terraform creates is accessible via IPv6. If yours isn't, either attach a Floating or Elastic IP or use the fixed IP somehow.  The SSH key being used is  /root/.ssh/id_rsa . This is because Waffles does not support non-default SSH keys yet.  SSH access is allowed through the security group.", 
            "title": "Comments"
        }, 
        {
            "location": "/cookbook/waffles-and-terraform/#conclusion", 
            "text": "This recipe showed one way of using Waffles with Terraform. Both systems are extremely flexible and complement each other well, so there may be other ways of achieving the same result.  For example, you could use Terraform's  file  provisioner to copy the entire  ~/.waffles  directory to the remote virtual machine. The benefit of using Waffles's built-in push is that only the files which the role requires are copied over.", 
            "title": "Conclusion"
        }, 
        {
            "location": "/resources/", 
            "text": "Waffles Resources\n\n\nThis document will cover how resources are used in Waffles.\n\n\nLocation\n\n\nAll resources are stored in the \n$WAFFLES_DIR/lib\n directory:\n\n\n\n\nThe Standard Library of resources is located in \n$WAFFLES_DIR/lib/resources\n.\n\n\nApache-based resources are located in \n$WAFFLES_DIR/lib/apache\n.\n\n\nAugeas-based resources are located in \n$WAFFLES_DIR/lib/augeas\n.\n\n\nKeepalived-based resources are located in \n$WAFFLES_DIR/lib/keepalived\n.\n\n\nMySQL-based resources are located in \n$WAFFLES_DIR/lib/mysql\n.\n\n\nNginx-based resources are located in \n$WAFFLES_DIR/lib/nginx\n.\n\n\nRabbitMQ-based resources are located in \n$WAFFLES_DIR/lib/rabbitmq\n.\n\n\n\n\nEnabling Non-Standard Resources\n\n\nBy default, only the Standard Library is enabled in Waffles. To enable the other resources, use the following functions:\n\n\n\n\nApache: \nstdlib.enable_apache\n\n\nAugeas: \nstdlib.enable_augeas\n\n\nKeepalived: \nstdlib.enable_keepalived\n\n\nMySQL: \nstdlib.enable_mysql\n\n\nNginx: \nstdlib.enable_nginx\n\n\nRabbitMQ: \nstdlib.enable_rabbitmq\n\n\n\n\nAnatomy of a Resource\n\n\nAll resources share much of the same code. In the future, resources may be refactored to account for a lot of this shared code.\n\n\nHeader\n\n\nEach resource has a detailed comment header. This header describes what the resource does, what parameters it takes, how to use it, and any comments.\n\n\nfunction resource.name\n\n\nThe next part of a resource is the first \"function\". This first function is named after the resource name. So any time you use a resource, you're actually just calling a Bash function.\n\n\nThe first thing done inside this function is to call a \"subtitle\" with \nstdlib.subtitle\n. Subtitles serve two purposes:\n\n\n\n\nThey set the name to be printed when running Waffles.\n\n\nThey reset an internal flag for changes made in the resource. This flag is called \nstdlib_resource_change\n. See the \"State Changes\" section for more details.\n\n\n\n\nNext, an \noptions\n variable is declared. It is important that this variable is declared in each resource. If not, then the resource will share variables with the last called resource. After the \noptions\n variable is declared, any parameters for the resource are declared. Finally, variables are checked via \nstdlib.options.parse_options\n. All logic related to \noptions\n can be found in \n$WAFFLES_DIR/lib/options.sh\n.\n\n\nAfter options, a catalog entry is made.\n\n\nNext, any optional custom logic is defined. This usually includes local variables just for the resource or ensuring that correctly formatted parameters were given.\n\n\nThe last section of this function determines the state of the resource by calling \nfunction.name.read\n and comparing it against the declared state of the resource. For example, if the state of the resource is \"absent\" but it should be \"present\", or if the resource is \"present\" but it should be \"absent\".\n\n\nThe rest of the resource is made up of four standard functions:\n\n\n\n\nfunction.name.read\n\n\nfunction.name.create\n\n\nfunction.name.update\n\n\nfunction.name.delete\n\n\n\n\nSome resources contain extra functions, but they always tie back into those standard four. Sometimes \nfunction.name.update\n doesn't exist, and the call in the \nstdlib_current_state\n case statement just points to \nfuction.name.create\n. Or it's possible to combine a \nfunction.name.delete\n with \nfunction.name.create\n for an update.\n\n\nSo in summary, the skeleton of a function is really just:\n\n\n\n\nfunction.name\n\n\nfunction.name.read\n\n\nfunction.name.create\n\n\nfunction.name.update (optional)\n\n\nfunction.name.delete\n\n\n\n\nIf you create a resource that conforms to those five functions, it'll work just fine in Waffles.\n\n\nfunction resource.name.read\n\n\nThe \nread\n function determines the current state of the resource. For example, \nstdlib.apt.read\n determines if the package is installed, and if so, what version is installed.\n\n\nfunction resource.name.create\n\n\nThe \ncreate\n function does whatever is required to create the the resource. For example, \nstdlib.apt.create\n installs a package via \napt\n and \nstdlib.file_line.create\n adds a line to a given file either by \necho\n or \nsed\n.\n\n\nIt's important to try to stick with a core philosophy of Waffles: use standard nix utilities for the creation of resources.\n\n\nfunction resource.name.update\n\n\nIf the work required to update a resource is different than creating a resource, use the \nupdate\n function. However, if it's easier to simply delete the resource and recreate it, then do that instead of an update function. Just don't use that method as an excuse.\n\n\nfunction resource.name.delete\n\n\nThis function deletes the resource. For example, \nstdlib.apt.delete\n will actually remove the package.\n\n\nState Changes\n\n\nAfter you call a resource, you can check the status of the \nstdlib_resource_change\n flag. If it is true, then a change happened when you called the resource. For example:\n\n\nstdlib.apt --package sl --version latest\n\nif [[ $stdlib_resource_change == \ntrue\n ]]; then\n  stdlib.info \nPackage sl was installed or upgraded.\n\nfi\n\n\n\n\nSimilar to \nstdlib_resource_change\n is \nstdlib_state_change\n. \nstdlib_state_change\n works in the exact same way, but it is reset when a call to \nstdlib.title\n is made. You usually use \nstdlib.title\n at the beginning of Profiles.\n\n\nExamples\n\n\nUse the Standard Library, Augeas, MySQL, and RabbitMQ resources as examples of how resources are built.", 
            "title": "Internals"
        }, 
        {
            "location": "/resources/#waffles-resources", 
            "text": "This document will cover how resources are used in Waffles.", 
            "title": "Waffles Resources"
        }, 
        {
            "location": "/resources/#location", 
            "text": "All resources are stored in the  $WAFFLES_DIR/lib  directory:   The Standard Library of resources is located in  $WAFFLES_DIR/lib/resources .  Apache-based resources are located in  $WAFFLES_DIR/lib/apache .  Augeas-based resources are located in  $WAFFLES_DIR/lib/augeas .  Keepalived-based resources are located in  $WAFFLES_DIR/lib/keepalived .  MySQL-based resources are located in  $WAFFLES_DIR/lib/mysql .  Nginx-based resources are located in  $WAFFLES_DIR/lib/nginx .  RabbitMQ-based resources are located in  $WAFFLES_DIR/lib/rabbitmq .", 
            "title": "Location"
        }, 
        {
            "location": "/resources/#enabling-non-standard-resources", 
            "text": "By default, only the Standard Library is enabled in Waffles. To enable the other resources, use the following functions:   Apache:  stdlib.enable_apache  Augeas:  stdlib.enable_augeas  Keepalived:  stdlib.enable_keepalived  MySQL:  stdlib.enable_mysql  Nginx:  stdlib.enable_nginx  RabbitMQ:  stdlib.enable_rabbitmq", 
            "title": "Enabling Non-Standard Resources"
        }, 
        {
            "location": "/resources/#anatomy-of-a-resource", 
            "text": "All resources share much of the same code. In the future, resources may be refactored to account for a lot of this shared code.  Header  Each resource has a detailed comment header. This header describes what the resource does, what parameters it takes, how to use it, and any comments.  function resource.name  The next part of a resource is the first \"function\". This first function is named after the resource name. So any time you use a resource, you're actually just calling a Bash function.  The first thing done inside this function is to call a \"subtitle\" with  stdlib.subtitle . Subtitles serve two purposes:   They set the name to be printed when running Waffles.  They reset an internal flag for changes made in the resource. This flag is called  stdlib_resource_change . See the \"State Changes\" section for more details.   Next, an  options  variable is declared. It is important that this variable is declared in each resource. If not, then the resource will share variables with the last called resource. After the  options  variable is declared, any parameters for the resource are declared. Finally, variables are checked via  stdlib.options.parse_options . All logic related to  options  can be found in  $WAFFLES_DIR/lib/options.sh .  After options, a catalog entry is made.  Next, any optional custom logic is defined. This usually includes local variables just for the resource or ensuring that correctly formatted parameters were given.  The last section of this function determines the state of the resource by calling  function.name.read  and comparing it against the declared state of the resource. For example, if the state of the resource is \"absent\" but it should be \"present\", or if the resource is \"present\" but it should be \"absent\".  The rest of the resource is made up of four standard functions:   function.name.read  function.name.create  function.name.update  function.name.delete   Some resources contain extra functions, but they always tie back into those standard four. Sometimes  function.name.update  doesn't exist, and the call in the  stdlib_current_state  case statement just points to  fuction.name.create . Or it's possible to combine a  function.name.delete  with  function.name.create  for an update.  So in summary, the skeleton of a function is really just:   function.name  function.name.read  function.name.create  function.name.update (optional)  function.name.delete   If you create a resource that conforms to those five functions, it'll work just fine in Waffles.  function resource.name.read  The  read  function determines the current state of the resource. For example,  stdlib.apt.read  determines if the package is installed, and if so, what version is installed.  function resource.name.create  The  create  function does whatever is required to create the the resource. For example,  stdlib.apt.create  installs a package via  apt  and  stdlib.file_line.create  adds a line to a given file either by  echo  or  sed .  It's important to try to stick with a core philosophy of Waffles: use standard nix utilities for the creation of resources.  function resource.name.update  If the work required to update a resource is different than creating a resource, use the  update  function. However, if it's easier to simply delete the resource and recreate it, then do that instead of an update function. Just don't use that method as an excuse.  function resource.name.delete  This function deletes the resource. For example,  stdlib.apt.delete  will actually remove the package.", 
            "title": "Anatomy of a Resource"
        }, 
        {
            "location": "/resources/#state-changes", 
            "text": "After you call a resource, you can check the status of the  stdlib_resource_change  flag. If it is true, then a change happened when you called the resource. For example:  stdlib.apt --package sl --version latest\n\nif [[ $stdlib_resource_change ==  true  ]]; then\n  stdlib.info  Package sl was installed or upgraded. \nfi  Similar to  stdlib_resource_change  is  stdlib_state_change .  stdlib_state_change  works in the exact same way, but it is reset when a call to  stdlib.title  is made. You usually use  stdlib.title  at the beginning of Profiles.", 
            "title": "State Changes"
        }, 
        {
            "location": "/resources/#examples", 
            "text": "Use the Standard Library, Augeas, MySQL, and RabbitMQ resources as examples of how resources are built.", 
            "title": "Examples"
        }, 
        {
            "location": "/resources/stdlib.apt_key/", 
            "text": "stdlib.apt_key\n\n\nDescription\n\n\nManages apt keys\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name. Required. namevar.\n\n\nkey: The key to import. Required if no remote_keyfile.\n\n\nkeyserver: The key server. Required if no remote_keyfile.\n\n\nremote_keyfile: A remote key to import. Required if no key or keyserver.\n\n\n\n\nExample\n\n\nstdlib.apt_key --key 1C4CBDCDCD2EFD2A", 
            "title": "stdlib.apt_key"
        }, 
        {
            "location": "/resources/stdlib.apt_key/#stdlibapt_key", 
            "text": "", 
            "title": "stdlib.apt_key"
        }, 
        {
            "location": "/resources/stdlib.apt_key/#description", 
            "text": "Manages apt keys", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.apt_key/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name. Required. namevar.  key: The key to import. Required if no remote_keyfile.  keyserver: The key server. Required if no remote_keyfile.  remote_keyfile: A remote key to import. Required if no key or keyserver.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.apt_key/#example", 
            "text": "stdlib.apt_key --key 1C4CBDCDCD2EFD2A", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.apt_ppa/", 
            "text": "stdlib.apt_ppa\n\n\nDescription\n\n\nManages PPA repositories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nppa: The PPA. Required. namevar.\n\n\nrefresh: run apt-get update if the PPA was modified. Default: true.\n\n\n\n\nExample\n\n\nstdlib.apt_ppa --ppa ppa:chris-lea/redis-server", 
            "title": "stdlib.apt_ppa"
        }, 
        {
            "location": "/resources/stdlib.apt_ppa/#stdlibapt_ppa", 
            "text": "", 
            "title": "stdlib.apt_ppa"
        }, 
        {
            "location": "/resources/stdlib.apt_ppa/#description", 
            "text": "Manages PPA repositories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.apt_ppa/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  ppa: The PPA. Required. namevar.  refresh: run apt-get update if the PPA was modified. Default: true.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.apt_ppa/#example", 
            "text": "stdlib.apt_ppa --ppa ppa:chris-lea/redis-server", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.apt/", 
            "text": "stdlib.apt\n\n\nDescription\n\n\nManage packages via apt.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npackage: The name of the package. Required. namevar.\n\n\nversion: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.\n\n\n\n\nExample\n\n\nstdlib.apt --package tmux --version latest", 
            "title": "stdlib.apt"
        }, 
        {
            "location": "/resources/stdlib.apt/#stdlibapt", 
            "text": "", 
            "title": "stdlib.apt"
        }, 
        {
            "location": "/resources/stdlib.apt/#description", 
            "text": "Manage packages via apt.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.apt/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  package: The name of the package. Required. namevar.  version: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.apt/#example", 
            "text": "stdlib.apt --package tmux --version latest", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.apt_source/", 
            "text": "stdlib.apt_source\n\n\nDescription\n\n\nManage /etc/apt/sources.list.d entries.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the apt repo. Required.\n\n\nuri: The URI of the apt repo. Required.\n\n\ndistribution: The distribution of the apt repo. Required.\n\n\ncomponent: The component of the apt repo. Required.\n\n\ninclude_src: Whether to include the source repo. Default: false.\n\n\nrefresh: run apt-get update if the source was modified. Default: true.\n\n\n\n\nExample\n\n\nstdlib.apt_source --name lxc --uri http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu \\\n                  --distribution trusty --component main", 
            "title": "stdlib.apt_source"
        }, 
        {
            "location": "/resources/stdlib.apt_source/#stdlibapt_source", 
            "text": "", 
            "title": "stdlib.apt_source"
        }, 
        {
            "location": "/resources/stdlib.apt_source/#description", 
            "text": "Manage /etc/apt/sources.list.d entries.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.apt_source/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the apt repo. Required.  uri: The URI of the apt repo. Required.  distribution: The distribution of the apt repo. Required.  component: The component of the apt repo. Required.  include_src: Whether to include the source repo. Default: false.  refresh: run apt-get update if the source was modified. Default: true.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.apt_source/#example", 
            "text": "stdlib.apt_source --name lxc --uri http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu \\\n                  --distribution trusty --component main", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.cron/", 
            "text": "stdlib.cron\n\n\nDescription\n\n\nManages cron entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: A single-word name for the cron. Required. namevar.\n\n\nuser: The user to run the cron job as. Default: root.\n\n\ncmd: The command to run. Required.\n\n\nminute: The minute field of the cron. Default: *.\n\n\nhour: The hour field of the cron. Default: *.\n\n\ndom: The day of month field for the cron. Default: *.\n\n\nmonth: The month field of the cron. Default: *.\n\n\ndow: The day of week field of the cron. Default: *.\n\n\n\n\nExample\n\n\nstdlib.cron --name foobar --cmd /path/to/some/report --minute \n*/5\n\n\n\n\n\nTODO\n\n\nAdd support for prefix info such as PATH, MAILTO.", 
            "title": "stdlib.cron"
        }, 
        {
            "location": "/resources/stdlib.cron/#stdlibcron", 
            "text": "", 
            "title": "stdlib.cron"
        }, 
        {
            "location": "/resources/stdlib.cron/#description", 
            "text": "Manages cron entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.cron/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: A single-word name for the cron. Required. namevar.  user: The user to run the cron job as. Default: root.  cmd: The command to run. Required.  minute: The minute field of the cron. Default: *.  hour: The hour field of the cron. Default: *.  dom: The day of month field for the cron. Default: *.  month: The month field of the cron. Default: *.  dow: The day of week field of the cron. Default: *.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.cron/#example", 
            "text": "stdlib.cron --name foobar --cmd /path/to/some/report --minute  */5", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.cron/#todo", 
            "text": "Add support for prefix info such as PATH, MAILTO.", 
            "title": "TODO"
        }, 
        {
            "location": "/resources/stdlib.debconf/", 
            "text": "stdlib.debconf\n\n\nDescription\n\n\nManages debconf entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name. Required. namevar.\n\n\npackage: The package to configure. Required.\n\n\nquestion: The debconf question. Required.\n\n\nvtype: The vtype of the debconf setting. Required.\n\n\nvalue: The answer/setting. Required.\n\n\nunseen: Whether to set the setting to unseen.\n\n\n\n\nExample\n\n\nstdlib.debconf --package mysql-server --question mysql-server/root_password\n               --vtype password --value mypassword", 
            "title": "stdlib.debconf"
        }, 
        {
            "location": "/resources/stdlib.debconf/#stdlibdebconf", 
            "text": "", 
            "title": "stdlib.debconf"
        }, 
        {
            "location": "/resources/stdlib.debconf/#description", 
            "text": "Manages debconf entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.debconf/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name. Required. namevar.  package: The package to configure. Required.  question: The debconf question. Required.  vtype: The vtype of the debconf setting. Required.  value: The answer/setting. Required.  unseen: Whether to set the setting to unseen.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.debconf/#example", 
            "text": "stdlib.debconf --package mysql-server --question mysql-server/root_password\n               --vtype password --value mypassword", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.directory/", 
            "text": "stdlib.directory\n\n\nDescription\n\n\nManages directories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nowner: The owner of the directory. Default: root.\n\n\ngroup: The group of the directory. Default: root.\n\n\nmode: The perms/mode of the directory. Default: 750.\n\n\nname: The destination directory. Required. namevar.\n\n\nsource: Optional source directory to copy.\n\n\nrecurse: Whether to apply all settings recursively. Optional.\n\n\nparent: Whether to make the parent directories. Optional.\n\n\n\n\nExample\n\n\nstdlib.directory --source modules/mymod/files/foo --name /var/lib/foo", 
            "title": "stdlib.directory"
        }, 
        {
            "location": "/resources/stdlib.directory/#stdlibdirectory", 
            "text": "", 
            "title": "stdlib.directory"
        }, 
        {
            "location": "/resources/stdlib.directory/#description", 
            "text": "Manages directories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.directory/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  owner: The owner of the directory. Default: root.  group: The group of the directory. Default: root.  mode: The perms/mode of the directory. Default: 750.  name: The destination directory. Required. namevar.  source: Optional source directory to copy.  recurse: Whether to apply all settings recursively. Optional.  parent: Whether to make the parent directories. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.directory/#example", 
            "text": "stdlib.directory --source modules/mymod/files/foo --name /var/lib/foo", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.file_line/", 
            "text": "stdlib.file_line\n\n\nDescription\n\n\nManages single lines in a file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the resource. namevar.\n\n\nline: The line to manage. Required.\n\n\nfile: The file that the line belongs to. Required.\n\n\nmatch: A regex to match to. Optional.\n\n\n\n\nExample\n\n\nstdlib.file_line --name \n/etc/memcached.conf -l\n \\\n                 --file /etc/memcached.conf \\\n                 --line \n-l 0.0.0.0\n --match \n^-l", 
            "title": "stdlib.file_line"
        }, 
        {
            "location": "/resources/stdlib.file_line/#stdlibfile_line", 
            "text": "", 
            "title": "stdlib.file_line"
        }, 
        {
            "location": "/resources/stdlib.file_line/#description", 
            "text": "Manages single lines in a file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.file_line/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the resource. namevar.  line: The line to manage. Required.  file: The file that the line belongs to. Required.  match: A regex to match to. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.file_line/#example", 
            "text": "stdlib.file_line --name  /etc/memcached.conf -l  \\\n                 --file /etc/memcached.conf \\\n                 --line  -l 0.0.0.0  --match  ^-l", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.file/", 
            "text": "stdlib.file\n\n\nDescription\n\n\nManages files\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nowner: The owner of the directory. Default: root.\n\n\ngroup: The group of the directory. Default: root.\n\n\nmode: The perms/mode of the directory. Default: 750.\n\n\nname: The destination file. Required. namevar.\n\n\ncontent: STDIN content for the file. Optional.\n\n\nsource: Source directory to copy. Optional.\n\n\n\n\nExample\n\n\nstdlib.file --name /etc/foobar --content \nHello, World!", 
            "title": "stdlib.file"
        }, 
        {
            "location": "/resources/stdlib.file/#stdlibfile", 
            "text": "", 
            "title": "stdlib.file"
        }, 
        {
            "location": "/resources/stdlib.file/#description", 
            "text": "Manages files", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.file/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  owner: The owner of the directory. Default: root.  group: The group of the directory. Default: root.  mode: The perms/mode of the directory. Default: 750.  name: The destination file. Required. namevar.  content: STDIN content for the file. Optional.  source: Source directory to copy. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.file/#example", 
            "text": "stdlib.file --name /etc/foobar --content  Hello, World!", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.git/", 
            "text": "stdlib.git\n\n\nDescription\n\n\nManage a git repository\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name (path) of the git repo destination. Required.\n\n\nsource: The URI of the source git repo. Required.\n\n\nbranch: The branch to checkout. Optional. Default: master.\n\n\ntag: The tag to checkout. Optional.\n\n\ncommit: the commit to checkout. Optional.\n\n\nowner: The owner of the repo. Default: root.\n\n\ngroup: The group owner of the repo. Default: root.\n\n\n\n\nExample\n\n\ngit --state latest --name /root/.dotfiles --source https://github.com/jtopjian/dotfiles\n\n\n\n\nNotes\n\n\nIf state is set to \"latest\", Waffles will do a \ngit pull\n if it's able to.\n\n\nThe order of checkout preferences is:\n\n\n\n\ncommit\n\n\ntag\n\n\nbranch", 
            "title": "stdlib.git"
        }, 
        {
            "location": "/resources/stdlib.git/#stdlibgit", 
            "text": "", 
            "title": "stdlib.git"
        }, 
        {
            "location": "/resources/stdlib.git/#description", 
            "text": "Manage a git repository", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.git/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name (path) of the git repo destination. Required.  source: The URI of the source git repo. Required.  branch: The branch to checkout. Optional. Default: master.  tag: The tag to checkout. Optional.  commit: the commit to checkout. Optional.  owner: The owner of the repo. Default: root.  group: The group owner of the repo. Default: root.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.git/#example", 
            "text": "git --state latest --name /root/.dotfiles --source https://github.com/jtopjian/dotfiles", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.git/#notes", 
            "text": "If state is set to \"latest\", Waffles will do a  git pull  if it's able to.  The order of checkout preferences is:   commit  tag  branch", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/stdlib.groupadd/", 
            "text": "stdlib.groupadd\n\n\nDescription\n\n\nManages groups\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ngroup: The group. Required. namevar.\n\n\ngid: The gid of the group. Optional.\n\n\n\n\nExample\n\n\nstdlib.groupadd --group jdoe --gid 999", 
            "title": "stdlib.groupadd"
        }, 
        {
            "location": "/resources/stdlib.groupadd/#stdlibgroupadd", 
            "text": "", 
            "title": "stdlib.groupadd"
        }, 
        {
            "location": "/resources/stdlib.groupadd/#description", 
            "text": "Manages groups", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.groupadd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  group: The group. Required. namevar.  gid: The gid of the group. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.groupadd/#example", 
            "text": "stdlib.groupadd --group jdoe --gid 999", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.ini/", 
            "text": "stdlib.ini\n\n\nDescription\n\n\nManages ini files/entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nfile: The ini file. Required.\n\n\nsection: The ini file section. Required.\n\n\noption: The ini file setting/option. Required.\n\n\nvalue: The value of the option. Required.\n\n\n\n\nExample\n\n\nstdlib.ini --file /etc/nova/nova.conf --section DEFAULT --option debug --value True", 
            "title": "stdlib.ini"
        }, 
        {
            "location": "/resources/stdlib.ini/#stdlibini", 
            "text": "", 
            "title": "stdlib.ini"
        }, 
        {
            "location": "/resources/stdlib.ini/#description", 
            "text": "Manages ini files/entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.ini/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  file: The ini file. Required.  section: The ini file section. Required.  option: The ini file setting/option. Required.  value: The value of the option. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.ini/#example", 
            "text": "stdlib.ini --file /etc/nova/nova.conf --section DEFAULT --option debug --value True", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.ip6tables_rule/", 
            "text": "stdlib.ip6tables_rule\n\n\nDescription\n\n\nManages ip6tables rules\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the rule. Required. namevar.\n\n\npriority: An arbitrary number to give the rule priority. Required. Default 100.\n\n\ntable: The table to add the rule to.. Required. Default: filter.\n\n\nchain: The chain to add the rule to. Required. Default: INPUT.\n\n\nrule: The rule. Required.\n\n\naction: The action to take on the rule. Required. Default: ACCEPT.\n\n\n\n\nExample\n\n\nstdlib.ip6tables_rule --priority 100 --name \nallow all from 192.168.1.0/24\n --rule \n-m tcp -s 192.168.1.0/24\n --action ACCEPT", 
            "title": "stdlib.ip6tables_rule"
        }, 
        {
            "location": "/resources/stdlib.ip6tables_rule/#stdlibip6tables_rule", 
            "text": "", 
            "title": "stdlib.ip6tables_rule"
        }, 
        {
            "location": "/resources/stdlib.ip6tables_rule/#description", 
            "text": "Manages ip6tables rules", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.ip6tables_rule/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the rule. Required. namevar.  priority: An arbitrary number to give the rule priority. Required. Default 100.  table: The table to add the rule to.. Required. Default: filter.  chain: The chain to add the rule to. Required. Default: INPUT.  rule: The rule. Required.  action: The action to take on the rule. Required. Default: ACCEPT.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.ip6tables_rule/#example", 
            "text": "stdlib.ip6tables_rule --priority 100 --name  allow all from 192.168.1.0/24  --rule  -m tcp -s 192.168.1.0/24  --action ACCEPT", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.iptables_rule/", 
            "text": "stdlib.iptables_rule\n\n\nDescription\n\n\nManages iptables rules\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the rule. Required. namevar.\n\n\npriority: An arbitrary number to give the rule priority. Required. Default 100.\n\n\ntable: The table to add the rule to.. Required. Default: filter.\n\n\nchain: The chain to add the rule to. Required. Default: INPUT.\n\n\nrule: The rule. Required.\n\n\naction: The action to take on the rule. Required. Default: ACCEPT.\n\n\n\n\nExample\n\n\nstdlib.iptables_rule --priority 100 --name \nallow all from 192.168.1.0/24\n --rule \n-m tcp -s 192.168.1.0/24\n --action ACCEPT", 
            "title": "stdlib.iptables_rule"
        }, 
        {
            "location": "/resources/stdlib.iptables_rule/#stdlibiptables_rule", 
            "text": "", 
            "title": "stdlib.iptables_rule"
        }, 
        {
            "location": "/resources/stdlib.iptables_rule/#description", 
            "text": "Manages iptables rules", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.iptables_rule/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the rule. Required. namevar.  priority: An arbitrary number to give the rule priority. Required. Default 100.  table: The table to add the rule to.. Required. Default: filter.  chain: The chain to add the rule to. Required. Default: INPUT.  rule: The rule. Required.  action: The action to take on the rule. Required. Default: ACCEPT.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.iptables_rule/#example", 
            "text": "stdlib.iptables_rule --priority 100 --name  allow all from 192.168.1.0/24  --rule  -m tcp -s 192.168.1.0/24  --action ACCEPT", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.sysvinit/", 
            "text": "stdlib.sysvinit\n\n\nDescription\n\n\nManages sysv-init services\n\n\nParameters\n\n\n\n\nstate: The state of the service. Required. Default: running.\n\n\nname: The name of the service. Required. namevar.\n\n\n\n\nExample\n\n\nstdlib.sysvinit --name memcached", 
            "title": "stdlib.sysvinit"
        }, 
        {
            "location": "/resources/stdlib.sysvinit/#stdlibsysvinit", 
            "text": "", 
            "title": "stdlib.sysvinit"
        }, 
        {
            "location": "/resources/stdlib.sysvinit/#description", 
            "text": "Manages sysv-init services", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.sysvinit/#parameters", 
            "text": "state: The state of the service. Required. Default: running.  name: The name of the service. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.sysvinit/#example", 
            "text": "stdlib.sysvinit --name memcached", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.upstart/", 
            "text": "stdlib.upstart\n\n\nDescription\n\n\nManages upstart services\n\n\nParameters\n\n\n\n\nstate: The state of the service. Required. Default: running.\n\n\nname: The name of the service. Required. namevar.\n\n\n\n\nExample\n\n\nstdlib.upstart --name memcached", 
            "title": "stdlib.upstart"
        }, 
        {
            "location": "/resources/stdlib.upstart/#stdlibupstart", 
            "text": "", 
            "title": "stdlib.upstart"
        }, 
        {
            "location": "/resources/stdlib.upstart/#description", 
            "text": "Manages upstart services", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.upstart/#parameters", 
            "text": "state: The state of the service. Required. Default: running.  name: The name of the service. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.upstart/#example", 
            "text": "stdlib.upstart --name memcached", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.useradd/", 
            "text": "stdlib.useradd\n\n\nDescription\n\n\nManages users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user Required. namevar.\n\n\nuid: The uid of the user Optional.\n\n\ngid: The gid of the user Optional.\n\n\ncreatehome: Whether to create the homedir. Default: false.\n\n\nsudo: Whether to give sudo ability: Default: false.\n\n\nshell: The shell of the user. Default /usr/sbin/nologin.\n\n\ncomment: The comment field. Optional.\n\n\nhomedir: The homedir of the user. Optional.\n\n\npasswd: The password hash. Optional.\n\n\ngroups: Supplemental groups of the user. Optional.\n\n\nsystem: Whether the user is a system user or not. Default: false\n\n\n\n\nExample\n\n\nstdlib.useradd --user jdoe --uid 999 --createhome true --homedir /home/jdoe\n               --shell /bin/bash --comment \nJohn Doe\n\n\n\n\n\nNotes\n\n\nThe \n--system true\n flag is only useful during a create. If the user already\nexists and you choose to change it into a system using with the \n--system\n\nflag, it's best to delete the user and recreate it.", 
            "title": "stdlib.useradd"
        }, 
        {
            "location": "/resources/stdlib.useradd/#stdlibuseradd", 
            "text": "", 
            "title": "stdlib.useradd"
        }, 
        {
            "location": "/resources/stdlib.useradd/#description", 
            "text": "Manages users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/stdlib.useradd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user Required. namevar.  uid: The uid of the user Optional.  gid: The gid of the user Optional.  createhome: Whether to create the homedir. Default: false.  sudo: Whether to give sudo ability: Default: false.  shell: The shell of the user. Default /usr/sbin/nologin.  comment: The comment field. Optional.  homedir: The homedir of the user. Optional.  passwd: The password hash. Optional.  groups: Supplemental groups of the user. Optional.  system: Whether the user is a system user or not. Default: false", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/stdlib.useradd/#example", 
            "text": "stdlib.useradd --user jdoe --uid 999 --createhome true --homedir /home/jdoe\n               --shell /bin/bash --comment  John Doe", 
            "title": "Example"
        }, 
        {
            "location": "/resources/stdlib.useradd/#notes", 
            "text": "The  --system true  flag is only useful during a create. If the user already\nexists and you choose to change it into a system using with the  --system \nflag, it's best to delete the user and recreate it.", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/apache.section/", 
            "text": "apache.section\n\n\nDescription\n\n\nManages an apache section.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ntype: The type of the section Required. namevar.\n\n\nname: The name of the section Required. namevar.\n\n\npath: The path leading up to the type. Optional. Multi. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/apache2/apache2.conf. namevar.\n\n\n\n\nExample\n\n\napache.section --type Directory --name /\napache.section --path \nVirtualHost=*:80\n --type Directory --name /", 
            "title": "apache.section"
        }, 
        {
            "location": "/resources/apache.section/#apachesection", 
            "text": "", 
            "title": "apache.section"
        }, 
        {
            "location": "/resources/apache.section/#description", 
            "text": "Manages an apache section.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apache.section/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  type: The type of the section Required. namevar.  name: The name of the section Required. namevar.  path: The path leading up to the type. Optional. Multi. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/apache2/apache2.conf. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apache.section/#example", 
            "text": "apache.section --type Directory --name /\napache.section --path  VirtualHost=*:80  --type Directory --name /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apache.setting/", 
            "text": "apache.setting\n\n\nDescription\n\n\nManages key/value settings in an Apache config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nkey: The name of the setting. Required. namevar.\n\n\nvalue: The value of the setting. Required. namevar.\n\n\npath: The path leading up to the key. Optional. Multi. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/apache2/apache2.conf. namevar.\n\n\n\n\nExample\n\n\napache.setting --path \nVirtualHost=*:80\n \\\n               --path \nDirectory=/\n \\\n               --key Require --value valid-user \\\n               --file /etc/apache2/sites-enabled/000-default.conf", 
            "title": "apache.setting"
        }, 
        {
            "location": "/resources/apache.setting/#apachesetting", 
            "text": "", 
            "title": "apache.setting"
        }, 
        {
            "location": "/resources/apache.setting/#description", 
            "text": "Manages key/value settings in an Apache config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apache.setting/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  key: The name of the setting. Required. namevar.  value: The value of the setting. Required. namevar.  path: The path leading up to the key. Optional. Multi. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/apache2/apache2.conf. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apache.setting/#example", 
            "text": "apache.setting --path  VirtualHost=*:80  \\\n               --path  Directory=/  \\\n               --key Require --value valid-user \\\n               --file /etc/apache2/sites-enabled/000-default.conf", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.aptconf/", 
            "text": "augeas.aptconf\n\n\nDescription\n\n\nManages apt.conf settings\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nsetting: The setting Required. namevar.\n\n\nvalue: A value for the setting Required.\n\n\nfile: The file to add the variable to. Required. namevar.\n\n\n\n\nExample\n\n\naugeas.aptconf --setting APT::Periodic::Update-Package-Lists --value 1 --file /etc/apt/apt.conf/20auto-upgrades\naugeas.aptconf --setting APT::Periodic::Unattended-Upgrade --value 1 --file /etc/apt/apt.conf/20auto-upgrades", 
            "title": "augeas.aptconf"
        }, 
        {
            "location": "/resources/augeas.aptconf/#augeasaptconf", 
            "text": "", 
            "title": "augeas.aptconf"
        }, 
        {
            "location": "/resources/augeas.aptconf/#description", 
            "text": "Manages apt.conf settings", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.aptconf/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  setting: The setting Required. namevar.  value: A value for the setting Required.  file: The file to add the variable to. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.aptconf/#example", 
            "text": "augeas.aptconf --setting APT::Periodic::Update-Package-Lists --value 1 --file /etc/apt/apt.conf/20auto-upgrades\naugeas.aptconf --setting APT::Periodic::Unattended-Upgrade --value 1 --file /etc/apt/apt.conf/20auto-upgrades", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.cron/", 
            "text": "augeas.cron\n\n\nDescription\n\n\nManages a cron entry in /etc/cron.d/\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the cron Required. namevar.\n\n\nuser: The user to run the cron under. Default: root.\n\n\nminute: The minute to run the cron. Default: *.\n\n\nhour: The hour to run the cron. Default: *.\n\n\ndom: The day of month to run the cron. Default: *.\n\n\nmonth: The month to run the cron. Default *.\n\n\ndow: The day of the week to run the cron. Default *.\n\n\ncmd: The command to run. Required.\n\n\n\n\nExample\n\n\naugeas.cron --name metrics --minute \n*/5\n --cmd /usr/local/bin/collect_metrics.sh", 
            "title": "augeas.cron"
        }, 
        {
            "location": "/resources/augeas.cron/#augeascron", 
            "text": "", 
            "title": "augeas.cron"
        }, 
        {
            "location": "/resources/augeas.cron/#description", 
            "text": "Manages a cron entry in /etc/cron.d/", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.cron/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the cron Required. namevar.  user: The user to run the cron under. Default: root.  minute: The minute to run the cron. Default: *.  hour: The hour to run the cron. Default: *.  dom: The day of month to run the cron. Default: *.  month: The month to run the cron. Default *.  dow: The day of the week to run the cron. Default *.  cmd: The command to run. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.cron/#example", 
            "text": "augeas.cron --name metrics --minute  */5  --cmd /usr/local/bin/collect_metrics.sh", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.file_line/", 
            "text": "augeas.file_line\n\n\nDescription\n\n\nManages single lines in a file\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the line. Required. namevar.\n\n\nline: The line to manage in the file. Required.\n\n\nfile: The file to add the line. Required. namevar.\n\n\n\n\nExample\n\n\naugeas.file_line --file /root/foo.txt --line \nHello, World!", 
            "title": "augeas.file_line"
        }, 
        {
            "location": "/resources/augeas.file_line/#augeasfile_line", 
            "text": "", 
            "title": "augeas.file_line"
        }, 
        {
            "location": "/resources/augeas.file_line/#description", 
            "text": "Manages single lines in a file", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.file_line/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the line. Required. namevar.  line: The line to manage in the file. Required.  file: The file to add the line. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.file_line/#example", 
            "text": "augeas.file_line --file /root/foo.txt --line  Hello, World!", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.host/", 
            "text": "augeas.host\n\n\nDescription\n\n\nManages hosts in /etc/hosts\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The host. Required. namevar.\n\n\nip: The IP address of the host. Required.\n\n\naliases: A CSV list of host aliases. Optional\n\n\nfile: The hosts file. Default: /etc/hosts.\n\n\n\n\nExample\n\n\naugeas.host --name example.com --ip 192.168.1.1 --aliases www,db", 
            "title": "augeas.host"
        }, 
        {
            "location": "/resources/augeas.host/#augeashost", 
            "text": "", 
            "title": "augeas.host"
        }, 
        {
            "location": "/resources/augeas.host/#description", 
            "text": "Manages hosts in /etc/hosts", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.host/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The host. Required. namevar.  ip: The IP address of the host. Required.  aliases: A CSV list of host aliases. Optional  file: The hosts file. Default: /etc/hosts.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.host/#example", 
            "text": "augeas.host --name example.com --ip 192.168.1.1 --aliases www,db", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.ini/", 
            "text": "augeas.ini\n\n\nDescription\n\n\nManages ini file entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nsection: The section in the ini file. Required. namevar.\n\n\noption: The option in the ini file. Required. namevar.\n\n\nvalue: The value of the option. Required.\n\n\nfile: The file to add the variable to. Required. namevar.\n\n\n\n\nExample\n\n\naugeas.ini --key foo --value bar --file /root/vars", 
            "title": "augeas.ini"
        }, 
        {
            "location": "/resources/augeas.ini/#augeasini", 
            "text": "", 
            "title": "augeas.ini"
        }, 
        {
            "location": "/resources/augeas.ini/#description", 
            "text": "Manages ini file entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.ini/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  section: The section in the ini file. Required. namevar.  option: The option in the ini file. Required. namevar.  value: The value of the option. Required.  file: The file to add the variable to. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.ini/#example", 
            "text": "augeas.ini --key foo --value bar --file /root/vars", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.json_array/", 
            "text": "augeas.json_array\n\n\nDescription\n\n\nManages a dictionary entry in a JSON file\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npath: The path to the setting in the json tree for non-k/v settings.\n\n\nkey: The key of the dictionary that will hold the array.\n\n\nvalue: The value of the array. Multi-var.\n\n\nfile: The file to add the variable to. Required.\n\n\n\n\nExample\n\n\naugeas.json_array --file /root/web.json --path / --key foo --value 1 --value 2 --value 3\n\n{\nfoo\n:[1,2,3]}", 
            "title": "augeas.json_array"
        }, 
        {
            "location": "/resources/augeas.json_array/#augeasjson_array", 
            "text": "", 
            "title": "augeas.json_array"
        }, 
        {
            "location": "/resources/augeas.json_array/#description", 
            "text": "Manages a dictionary entry in a JSON file", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.json_array/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  path: The path to the setting in the json tree for non-k/v settings.  key: The key of the dictionary that will hold the array.  value: The value of the array. Multi-var.  file: The file to add the variable to. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.json_array/#example", 
            "text": "augeas.json_array --file /root/web.json --path / --key foo --value 1 --value 2 --value 3\n\n{ foo :[1,2,3]}", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.json_dict/", 
            "text": "augeas.json_dict\n\n\nDescription\n\n\nManages a dictionary entry in a JSON file\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npath: The path to the setting in the json tree for non-k/v settings.\n\n\nkey: The key portion of the dictionary. Required.\n\n\nvalue: The value portion of the dictionary. Required.\n\n\ntype: The type of the value. Optional.\n\n\nfile: The file to add the variable to. Required.\n\n\n\n\nExample\n\n\naugeas.json_dict --file /root/web.json --path / --key \nfoo\n --value _dict\naugeas.json_dict --file /root/web.json --path / --key \nfoo\n --value _array\naugeas.json_dict --file /root/web.json --path / --key \nfoo\n --value \nbar", 
            "title": "augeas.json_dict"
        }, 
        {
            "location": "/resources/augeas.json_dict/#augeasjson_dict", 
            "text": "", 
            "title": "augeas.json_dict"
        }, 
        {
            "location": "/resources/augeas.json_dict/#description", 
            "text": "Manages a dictionary entry in a JSON file", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.json_dict/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  path: The path to the setting in the json tree for non-k/v settings.  key: The key portion of the dictionary. Required.  value: The value portion of the dictionary. Required.  type: The type of the value. Optional.  file: The file to add the variable to. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.json_dict/#example", 
            "text": "augeas.json_dict --file /root/web.json --path / --key  foo  --value _dict\naugeas.json_dict --file /root/web.json --path / --key  foo  --value _array\naugeas.json_dict --file /root/web.json --path / --key  foo  --value  bar", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.mail_alias/", 
            "text": "augeas.mail_alias\n\n\nDescription\n\n\nManages aliases in /etc/aliases\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\naccount: The mail account. Required. namevar.\n\n\ndestination: The destination for the account. Required. Multi-value.\n\n\nfile: The aliases file. Default: /etc/aliases.\n\n\n\n\nExample\n\n\naugeas.mail_alias --account root --destination /dev/null", 
            "title": "augeas.mail_alias"
        }, 
        {
            "location": "/resources/augeas.mail_alias/#augeasmail_alias", 
            "text": "", 
            "title": "augeas.mail_alias"
        }, 
        {
            "location": "/resources/augeas.mail_alias/#description", 
            "text": "Manages aliases in /etc/aliases", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.mail_alias/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  account: The mail account. Required. namevar.  destination: The destination for the account. Required. Multi-value.  file: The aliases file. Default: /etc/aliases.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.mail_alias/#example", 
            "text": "augeas.mail_alias --account root --destination /dev/null", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.shellvar/", 
            "text": "augeas.shellvar\n\n\nDescription\n\n\nManages simple k=v settings in a file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nkey: The key. Required. namevar.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to add the variable to. Required. namevar.\n\n\n\n\nExample\n\n\naugeas.shellvar --key foo --value bar --file /root/vars", 
            "title": "augeas.shellvar"
        }, 
        {
            "location": "/resources/augeas.shellvar/#augeasshellvar", 
            "text": "", 
            "title": "augeas.shellvar"
        }, 
        {
            "location": "/resources/augeas.shellvar/#description", 
            "text": "Manages simple k=v settings in a file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.shellvar/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  key: The key. Required. namevar.  value: A value for the key. Required.  file: The file to add the variable to. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.shellvar/#example", 
            "text": "augeas.shellvar --key foo --value bar --file /root/vars", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.ssh_authorized_key/", 
            "text": "augeas.ssh_authorized_key\n\n\nDescription\n\n\nManages ssh_authorized_keys\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The ssh_authorized_key. Required. namevar.\n\n\nkey: The ssh key. Required.\n\n\ntype: The key type. Required.\n\n\noptions: A CSV list of ssh_authorized_key options. Optional\n\n\nfile: The ssh_authorized_keys file. Required.\n\n\n\n\nExample\n\n\naugeas.ssh_authorized_key --name jdoe --key \nAAAAB3NzaC1...\n --type ssh-rsa --comment \njdoe@laptop\n\n\n\n\n\nNotes\n\n\nTODO: \noptions\n have not been tested.", 
            "title": "augeas.ssh_authorized_key"
        }, 
        {
            "location": "/resources/augeas.ssh_authorized_key/#augeasssh_authorized_key", 
            "text": "", 
            "title": "augeas.ssh_authorized_key"
        }, 
        {
            "location": "/resources/augeas.ssh_authorized_key/#description", 
            "text": "Manages ssh_authorized_keys", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.ssh_authorized_key/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The ssh_authorized_key. Required. namevar.  key: The ssh key. Required.  type: The key type. Required.  options: A CSV list of ssh_authorized_key options. Optional  file: The ssh_authorized_keys file. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.ssh_authorized_key/#example", 
            "text": "augeas.ssh_authorized_key --name jdoe --key  AAAAB3NzaC1...  --type ssh-rsa --comment  jdoe@laptop", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.ssh_authorized_key/#notes", 
            "text": "TODO:  options  have not been tested.", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/keepalived.global_defs/", 
            "text": "keepalived.global_defs\n\n\nDescription\n\n\nManages global_defs section in keepalived.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nnotification_email: Email address to send notifications. Optional. Multi-var.\n\n\nnotification_email_from: The From address on email notifications. Optional.\n\n\nsmtp_server: The smtp server to send notifications. Optional.\n\n\nsmtp_connect_timeout: Connect timeout for sending notifications. Optional.\n\n\nrouter_id: The router ID. Optional.\n\n\nvrrp_mcast_group4: VRRP multicast group for IPv4. Optional.\n\n\nvrrp_mcast_group6: VRRP multicast group for IPv6. Optional.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/keepalived/keepalived.conf.\n\n\n\n\nExample\n\n\nkeepalived.global_defs --notification_email root@localhost \\\n                       --notification_email jdoe@example.com \\\n                       --smtp_server smtp.example.com \\\n                       --router_id 42", 
            "title": "keepalived.global_defs"
        }, 
        {
            "location": "/resources/keepalived.global_defs/#keepalivedglobal_defs", 
            "text": "", 
            "title": "keepalived.global_defs"
        }, 
        {
            "location": "/resources/keepalived.global_defs/#description", 
            "text": "Manages global_defs section in keepalived.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/keepalived.global_defs/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  notification_email: Email address to send notifications. Optional. Multi-var.  notification_email_from: The From address on email notifications. Optional.  smtp_server: The smtp server to send notifications. Optional.  smtp_connect_timeout: Connect timeout for sending notifications. Optional.  router_id: The router ID. Optional.  vrrp_mcast_group4: VRRP multicast group for IPv4. Optional.  vrrp_mcast_group6: VRRP multicast group for IPv6. Optional.  file: The file to store the settings in. Optional. Defaults to /etc/keepalived/keepalived.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/keepalived.global_defs/#example", 
            "text": "keepalived.global_defs --notification_email root@localhost \\\n                       --notification_email jdoe@example.com \\\n                       --smtp_server smtp.example.com \\\n                       --router_id 42", 
            "title": "Example"
        }, 
        {
            "location": "/resources/keepalived.vrrp_instance/", 
            "text": "keepalived.vrrp_instance\n\n\nDescription\n\n\nManages vrrp_instance section in keepalived.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the VRRP instance. Required. namevar.\n\n\nvrrp_state: The state of the VRRP instance. Required.\n\n\ninterface: The interface to monitor. Required.\n\n\nvirtual_router_id: The virtual router ID. Required.\n\n\npriority: The priority. Required.\n\n\nadvert_int: The advert interval. Optional.\n\n\nauth_type: The authentication type. Optional.\n\n\nauth_pass: The authentication password. Optional.\n\n\nvirtual_ipaddress: A virtual IP address. Optional. Multi-var.\n\n\nsmtp_alert: Send an email during transition. Optional. Defaults to false.\n\n\nunicast_src_ip: Source IP for unicast packets. Optional.\n\n\nunicast_peer: A peer in a unicast group. Optional. Multi-var.\n\n\nnative_ipv6: Force IPv6. Optional. Defaults to false.\n\n\nnotify_master: The notify_master script. Optional.\n\n\nnotify_backup: The notify_backup script. Optional.\n\n\nnotify_fault: The notify_fault script. Optional.\n\n\nnotify: The notify script. Optional.\n\n\ndebug: Enable debugging. Optional. Defaults to false.\n\n\nfile: The file to store the settings in. Required. Defaults to /etc/keepalived/keepalived.conf.\n\n\n\n\nExample\n\n\nkeepalived.vrrp_instance --name VI_1 \\\n                         --vrrp_state MASTER \\\n                         --interface eth0 \\\n                         --virtual_router_id 42 \\\n                         --priority 100 \\\n                         --virtual_ipaddress 192.168.1.10", 
            "title": "keepalived.vrrp_instance"
        }, 
        {
            "location": "/resources/keepalived.vrrp_instance/#keepalivedvrrp_instance", 
            "text": "", 
            "title": "keepalived.vrrp_instance"
        }, 
        {
            "location": "/resources/keepalived.vrrp_instance/#description", 
            "text": "Manages vrrp_instance section in keepalived.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/keepalived.vrrp_instance/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the VRRP instance. Required. namevar.  vrrp_state: The state of the VRRP instance. Required.  interface: The interface to monitor. Required.  virtual_router_id: The virtual router ID. Required.  priority: The priority. Required.  advert_int: The advert interval. Optional.  auth_type: The authentication type. Optional.  auth_pass: The authentication password. Optional.  virtual_ipaddress: A virtual IP address. Optional. Multi-var.  smtp_alert: Send an email during transition. Optional. Defaults to false.  unicast_src_ip: Source IP for unicast packets. Optional.  unicast_peer: A peer in a unicast group. Optional. Multi-var.  native_ipv6: Force IPv6. Optional. Defaults to false.  notify_master: The notify_master script. Optional.  notify_backup: The notify_backup script. Optional.  notify_fault: The notify_fault script. Optional.  notify: The notify script. Optional.  debug: Enable debugging. Optional. Defaults to false.  file: The file to store the settings in. Required. Defaults to /etc/keepalived/keepalived.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/keepalived.vrrp_instance/#example", 
            "text": "keepalived.vrrp_instance --name VI_1 \\\n                         --vrrp_state MASTER \\\n                         --interface eth0 \\\n                         --virtual_router_id 42 \\\n                         --priority 100 \\\n                         --virtual_ipaddress 192.168.1.10", 
            "title": "Example"
        }, 
        {
            "location": "/resources/keepalived.vrrp_script/", 
            "text": "keepalived.vrrp_script\n\n\nDescription\n\n\nManages vrrp_script section in keepalived.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the VRRP instance. Required. namevar.\n\n\nscript: The script to define. Required.\n\n\ninterval: The interval to run the script. Optional.\n\n\nweight: The points for priority. Optional.\n\n\nfall: Number of failures for KO. Optional.\n\n\nraise: Number of successes for OK. Optional.\n\n\nfile: The file to store the settings in. Required. Defaults to /etc/keepalived/keepalived.conf.\n\n\n\n\nExample\n\n\nkeepalived.vrrp_script --name check_apache2 \\\n                       --script \nkillall -0 apache2", 
            "title": "keepalived.vrrp_script"
        }, 
        {
            "location": "/resources/keepalived.vrrp_script/#keepalivedvrrp_script", 
            "text": "", 
            "title": "keepalived.vrrp_script"
        }, 
        {
            "location": "/resources/keepalived.vrrp_script/#description", 
            "text": "Manages vrrp_script section in keepalived.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/keepalived.vrrp_script/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the VRRP instance. Required. namevar.  script: The script to define. Required.  interval: The interval to run the script. Optional.  weight: The points for priority. Optional.  fall: Number of failures for KO. Optional.  raise: Number of successes for OK. Optional.  file: The file to store the settings in. Required. Defaults to /etc/keepalived/keepalived.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/keepalived.vrrp_script/#example", 
            "text": "keepalived.vrrp_script --name check_apache2 \\\n                       --script  killall -0 apache2", 
            "title": "Example"
        }, 
        {
            "location": "/resources/keepalived.vrrp_sync_group/", 
            "text": "keepalived.vrrp_sync_group\n\n\nDescription\n\n\nManages vrrp_sync_group section in keepalived.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the VRRP instance. Required. namevar.\n\n\ngroup: The name of a VRRP instance. Required. Multi-var.\n\n\nfile: The file to store the settings in. Required. Defaults to /etc/keepalived/keepalived.conf.\n\n\n\n\nExample\n\n\nkeepalived.vrrp_sync_group --name VSG_1 \\\n                           --group VI_1 \\\n                           --group VI_2 \\", 
            "title": "keepalived.vrrp_sync_group"
        }, 
        {
            "location": "/resources/keepalived.vrrp_sync_group/#keepalivedvrrp_sync_group", 
            "text": "", 
            "title": "keepalived.vrrp_sync_group"
        }, 
        {
            "location": "/resources/keepalived.vrrp_sync_group/#description", 
            "text": "Manages vrrp_sync_group section in keepalived.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/keepalived.vrrp_sync_group/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the VRRP instance. Required. namevar.  group: The name of a VRRP instance. Required. Multi-var.  file: The file to store the settings in. Required. Defaults to /etc/keepalived/keepalived.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/keepalived.vrrp_sync_group/#example", 
            "text": "keepalived.vrrp_sync_group --name VSG_1 \\\n                           --group VI_1 \\\n                           --group VI_2 \\", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.database/", 
            "text": "mysql.database\n\n\nDescription\n\n\nManages MySQL databases\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the database. Required. namevar.\n\n\ncharset: The character set of the database.\n\n\ncollate: The collation of the database.\n\n\n\n\nExample\n\n\nmysql.database --name root --password password", 
            "title": "mysql.database"
        }, 
        {
            "location": "/resources/mysql.database/#mysqldatabase", 
            "text": "", 
            "title": "mysql.database"
        }, 
        {
            "location": "/resources/mysql.database/#description", 
            "text": "Manages MySQL databases", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.database/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the database. Required. namevar.  charset: The character set of the database.  collate: The collation of the database.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.database/#example", 
            "text": "mysql.database --name root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.grant/", 
            "text": "mysql.grant\n\n\nDescription\n\n\nManages MySQL grants\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user to receive the grant. Required. unique.\n\n\nhost: The host of the user. Required. unique.\n\n\ndatabase: The database to apply the grant on. Required.\n\n\nprivileges: The privileges to grant. Required.\n\n\n\n\nExample\n\n\nmysql.grant --user nova --host localhost --database nova --privileges \nSELECT, UPDATE, DELETE", 
            "title": "mysql.grant"
        }, 
        {
            "location": "/resources/mysql.grant/#mysqlgrant", 
            "text": "", 
            "title": "mysql.grant"
        }, 
        {
            "location": "/resources/mysql.grant/#description", 
            "text": "Manages MySQL grants", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.grant/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user to receive the grant. Required. unique.  host: The host of the user. Required. unique.  database: The database to apply the grant on. Required.  privileges: The privileges to grant. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.grant/#example", 
            "text": "mysql.grant --user nova --host localhost --database nova --privileges  SELECT, UPDATE, DELETE", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.user/", 
            "text": "mysql.user\n\n\nDescription\n\n\nManages MySQL users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username of the mysql user. unique.\n\n\nhost: The host of the mysql user. Required. unique.\n\n\npassword: The password of the mysql user.\n\n\n\n\nUnintuitively, user and password are optional because MySQL allows blank usernames and blank passwords.\n\n\nExample\n\n\nmysql.user --user root --password password", 
            "title": "mysql.user"
        }, 
        {
            "location": "/resources/mysql.user/#mysqluser", 
            "text": "", 
            "title": "mysql.user"
        }, 
        {
            "location": "/resources/mysql.user/#description", 
            "text": "Manages MySQL users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username of the mysql user. unique.  host: The host of the mysql user. Required. unique.  password: The password of the mysql user.   Unintuitively, user and password are optional because MySQL allows blank usernames and blank passwords.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.user/#example", 
            "text": "mysql.user --user root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.events/", 
            "text": "nginx.events\n\n\nDescription\n\n\nManages events key/value settings in nginx.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/nginx/nginx.conf.\n\n\n\n\nExample\n\n\nnginx.events --key worker_connections --value 768", 
            "title": "nginx.events"
        }, 
        {
            "location": "/resources/nginx.events/#nginxevents", 
            "text": "", 
            "title": "nginx.events"
        }, 
        {
            "location": "/resources/nginx.events/#description", 
            "text": "Manages events key/value settings in nginx.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.events/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  key: The key. Required.  value: A value for the key. Required.  file: The file to store the settings in. Optional. Defaults to /etc/nginx/nginx.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.events/#example", 
            "text": "nginx.events --key worker_connections --value 768", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.global/", 
            "text": "nginx.global\n\n\nDescription\n\n\nManages global key/value settings in nginx.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/nginx/nginx.conf.\n\n\n\n\nExample\n\n\nnginx.global --key user --value www-data\nnginx.global --key worker_processes --value 4", 
            "title": "nginx.global"
        }, 
        {
            "location": "/resources/nginx.global/#nginxglobal", 
            "text": "", 
            "title": "nginx.global"
        }, 
        {
            "location": "/resources/nginx.global/#description", 
            "text": "Manages global key/value settings in nginx.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.global/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  key: The key. Required.  value: A value for the key. Required.  file: The file to store the settings in. Optional. Defaults to /etc/nginx/nginx.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.global/#example", 
            "text": "nginx.global --key user --value www-data\nnginx.global --key worker_processes --value 4", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.http/", 
            "text": "nginx.http\n\n\nDescription\n\n\nManages http key/value settings in nginx.conf\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/nginx/nginx.conf.\n\n\n\n\nExample\n\n\nnginx.http --key index --value \nindex.html index.htm index.php\n\nlog_format='main \n$remote_addr - $remote_user [$time_local] $status \\\n$request\\\n $body_bytes_sent \\\n$http_referer\\\n \\\n$http_user_agent\\\n \\\n$http_x_forwarded_for\\\n'\nnginx.http --key log_format --value \n$log_format\n\nnginx.http --key access_log --value \n/var/log/nginx/access.log main", 
            "title": "nginx.http"
        }, 
        {
            "location": "/resources/nginx.http/#nginxhttp", 
            "text": "", 
            "title": "nginx.http"
        }, 
        {
            "location": "/resources/nginx.http/#description", 
            "text": "Manages http key/value settings in nginx.conf", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.http/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  key: The key. Required.  value: A value for the key. Required.  file: The file to store the settings in. Optional. Defaults to /etc/nginx/nginx.conf.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.http/#example", 
            "text": "nginx.http --key index --value  index.html index.htm index.php \nlog_format='main  $remote_addr - $remote_user [$time_local] $status \\ $request\\  $body_bytes_sent \\ $http_referer\\  \\ $http_user_agent\\  \\ $http_x_forwarded_for\\ '\nnginx.http --key log_format --value  $log_format \nnginx.http --key access_log --value  /var/log/nginx/access.log main", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.if/", 
            "text": "nginx.if\n\n\nDescription\n\n\nManages key/value settings in an nginx server if block\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The conditional of the if block. Required. namevar.\n\n\nserver_name: The name of the nginx_server resource. Required.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to add the variable to. Optional. Defaults to /etc/nginx/sites-enabled/server_name.\n\n\n\n\nExample\n\n\nnginx.if --name '$request_method !~ ^(GET|HEAD|POST)$' --server_name example.com --key return --value 444", 
            "title": "nginx.if"
        }, 
        {
            "location": "/resources/nginx.if/#nginxif", 
            "text": "", 
            "title": "nginx.if"
        }, 
        {
            "location": "/resources/nginx.if/#description", 
            "text": "Manages key/value settings in an nginx server if block", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.if/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The conditional of the if block. Required. namevar.  server_name: The name of the nginx_server resource. Required.  key: The key. Required.  value: A value for the key. Required.  file: The file to add the variable to. Optional. Defaults to /etc/nginx/sites-enabled/server_name.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.if/#example", 
            "text": "nginx.if --name '$request_method !~ ^(GET|HEAD|POST)$' --server_name example.com --key return --value 444", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.location/", 
            "text": "nginx.location\n\n\nDescription\n\n\nManages key/value settings in an nginx server location block\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the location block. Required. namevar.\n\n\nserver_name: The name of the nginx_server resource. Required.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to add the variable to. Optional. Defaults to /etc/nginx/sites-enabled/server_name.\n\n\n\n\nExample\n\n\nnginx.location --name '~ \\.php$' --server_name example.com --key try_files --value '$uri $uri/ @dw'", 
            "title": "nginx.location"
        }, 
        {
            "location": "/resources/nginx.location/#nginxlocation", 
            "text": "", 
            "title": "nginx.location"
        }, 
        {
            "location": "/resources/nginx.location/#description", 
            "text": "Manages key/value settings in an nginx server location block", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.location/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the location block. Required. namevar.  server_name: The name of the nginx_server resource. Required.  key: The key. Required.  value: A value for the key. Required.  file: The file to add the variable to. Optional. Defaults to /etc/nginx/sites-enabled/server_name.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.location/#example", 
            "text": "nginx.location --name '~ \\.php$' --server_name example.com --key try_files --value '$uri $uri/ @dw'", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.map/", 
            "text": "nginx.map\n\n\nDescription\n\n\nManages entries in an nginx.map block\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the map definition. Required.\n\n\nsource: The source of the map definition. Required.\n\n\nvariable: The variable of the map definition. Required.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/nginx/conf.d/map_name.\n\n\n\n\nExample\n\n\nnginx.map --name my_map --source '$http_host' --variable '$name' --key default --value 0\nnginx.map --name my_map --source '$http_host' --variable '$name' --key example.com --value 1", 
            "title": "nginx.map"
        }, 
        {
            "location": "/resources/nginx.map/#nginxmap", 
            "text": "", 
            "title": "nginx.map"
        }, 
        {
            "location": "/resources/nginx.map/#description", 
            "text": "Manages entries in an nginx.map block", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.map/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the map definition. Required.  source: The source of the map definition. Required.  variable: The variable of the map definition. Required.  key: The key. Required.  value: A value for the key. Required.  file: The file to store the settings in. Optional. Defaults to /etc/nginx/conf.d/map_name.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.map/#example", 
            "text": "nginx.map --name my_map --source '$http_host' --variable '$name' --key default --value 0\nnginx.map --name my_map --source '$http_host' --variable '$name' --key example.com --value 1", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.server/", 
            "text": "nginx.server\n\n\nDescription\n\n\nManages key/value settings in an nginx server block\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the server. Required. namevar.\n\n\nserver_name: The domain of the server. Optional. Defaults to name.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/nginx/sites-enabled/name.\n\n\n\n\nExample\n\n\nnginx.server --name example.com --key root --value /var/www/html\nnginx.server --name example.com --key listen --value 80\nnginx.server --name example.com --key index --value index.php", 
            "title": "nginx.server"
        }, 
        {
            "location": "/resources/nginx.server/#nginxserver", 
            "text": "", 
            "title": "nginx.server"
        }, 
        {
            "location": "/resources/nginx.server/#description", 
            "text": "Manages key/value settings in an nginx server block", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.server/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the server. Required. namevar.  server_name: The domain of the server. Optional. Defaults to name.  key: The key. Required.  value: A value for the key. Required.  file: The file to store the settings in. Optional. Defaults to /etc/nginx/sites-enabled/name.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.server/#example", 
            "text": "nginx.server --name example.com --key root --value /var/www/html\nnginx.server --name example.com --key listen --value 80\nnginx.server --name example.com --key index --value index.php", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.upstream/", 
            "text": "nginx.upstream\n\n\nDescription\n\n\nManages entries in an nginx upstream block\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the upstream definition. Required. namevar.\n\n\nkey: The key. Required.\n\n\nvalue: A value for the key. Required.\n\n\noptions: Extra options for the value. Optional.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/nginx/conf.d/upstream_name.\n\n\n\n\nExample\n\n\nnginx.upstream --name example_com --key server --value server1.example.com --options \nweight=5\n\nnginx.upstream --name example_com --key server --value server2.example.com\n\n\n\n\nNotes\n\n\nThis is broke at the moment due to an issue with the Nginx Augeas lens.\nThis comment will be removed when it's working.", 
            "title": "nginx.upstream"
        }, 
        {
            "location": "/resources/nginx.upstream/#nginxupstream", 
            "text": "", 
            "title": "nginx.upstream"
        }, 
        {
            "location": "/resources/nginx.upstream/#description", 
            "text": "Manages entries in an nginx upstream block", 
            "title": "Description"
        }, 
        {
            "location": "/resources/nginx.upstream/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the upstream definition. Required. namevar.  key: The key. Required.  value: A value for the key. Required.  options: Extra options for the value. Optional.  file: The file to store the settings in. Optional. Defaults to /etc/nginx/conf.d/upstream_name.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/nginx.upstream/#example", 
            "text": "nginx.upstream --name example_com --key server --value server1.example.com --options  weight=5 \nnginx.upstream --name example_com --key server --value server2.example.com", 
            "title": "Example"
        }, 
        {
            "location": "/resources/nginx.upstream/#notes", 
            "text": "This is broke at the moment due to an issue with the Nginx Augeas lens.\nThis comment will be removed when it's working.", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/rabbitmq.auth_backend/", 
            "text": "rabbitmq.auth_backend\n\n\nDescription\n\n\nManages auth_backend settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nbackend: The auth backend. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.auth_backend --backend PLAIN", 
            "title": "rabbitmq.auth_backend"
        }, 
        {
            "location": "/resources/rabbitmq.auth_backend/#rabbitmqauth_backend", 
            "text": "", 
            "title": "rabbitmq.auth_backend"
        }, 
        {
            "location": "/resources/rabbitmq.auth_backend/#description", 
            "text": "Manages auth_backend settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.auth_backend/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  backend: The auth backend. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.auth_backend/#example", 
            "text": "rabbitmq.auth_backend --backend PLAIN", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.auth_mechanism/", 
            "text": "rabbitmq.auth_mechanism\n\n\nDescription\n\n\nManages auth_mechanism settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nmechanism: The auth mechanism. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.auth_mechanism --mechanism PLAIN", 
            "title": "rabbitmq.auth_mechanism"
        }, 
        {
            "location": "/resources/rabbitmq.auth_mechanism/#rabbitmqauth_mechanism", 
            "text": "", 
            "title": "rabbitmq.auth_mechanism"
        }, 
        {
            "location": "/resources/rabbitmq.auth_mechanism/#description", 
            "text": "Manages auth_mechanism settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.auth_mechanism/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  mechanism: The auth mechanism. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.auth_mechanism/#example", 
            "text": "rabbitmq.auth_mechanism --mechanism PLAIN", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.backing_queue_module/", 
            "text": "rabbitmq.backing_queue_module\n\n\nDescription\n\n\nManages backing_queue_module settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.backing_queue_module --value /", 
            "title": "rabbitmq.backing_queue_module"
        }, 
        {
            "location": "/resources/rabbitmq.backing_queue_module/#rabbitmqbacking_queue_module", 
            "text": "", 
            "title": "rabbitmq.backing_queue_module"
        }, 
        {
            "location": "/resources/rabbitmq.backing_queue_module/#description", 
            "text": "Manages backing_queue_module settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.backing_queue_module/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.backing_queue_module/#example", 
            "text": "rabbitmq.backing_queue_module --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.cluster_nodes/", 
            "text": "rabbitmq.cluster_nodes\n\n\nDescription\n\n\nManages cluster_nodes settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nnode: A node. Required. Multi-var.\n\n\ncluster_type: The cluster type. Optional. Defaults to disc.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.cluster_nodes --node rabbit@my.host.com --node rabbit@my2.host.com --cluster_type ram", 
            "title": "rabbitmq.cluster_nodes"
        }, 
        {
            "location": "/resources/rabbitmq.cluster_nodes/#rabbitmqcluster_nodes", 
            "text": "", 
            "title": "rabbitmq.cluster_nodes"
        }, 
        {
            "location": "/resources/rabbitmq.cluster_nodes/#description", 
            "text": "Manages cluster_nodes settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.cluster_nodes/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  node: A node. Required. Multi-var.  cluster_type: The cluster type. Optional. Defaults to disc.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.cluster_nodes/#example", 
            "text": "rabbitmq.cluster_nodes --node rabbit@my.host.com --node rabbit@my2.host.com --cluster_type ram", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics_interval/", 
            "text": "rabbitmq.collect_statistics_interval\n\n\nDescription\n\n\nManages collect_statistics_interval settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ninterval: The default interval. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.collect_statistics_interval --interval /", 
            "title": "rabbitmq.collect_statistics_interval"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics_interval/#rabbitmqcollect_statistics_interval", 
            "text": "", 
            "title": "rabbitmq.collect_statistics_interval"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics_interval/#description", 
            "text": "Manages collect_statistics_interval settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics_interval/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  interval: The default interval. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics_interval/#example", 
            "text": "rabbitmq.collect_statistics_interval --interval /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics/", 
            "text": "rabbitmq.collect_statistics\n\n\nDescription\n\n\nManages collect_statistics settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.collect_statistics --value /", 
            "title": "rabbitmq.collect_statistics"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics/#rabbitmqcollect_statistics", 
            "text": "", 
            "title": "rabbitmq.collect_statistics"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics/#description", 
            "text": "Manages collect_statistics settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.collect_statistics/#example", 
            "text": "rabbitmq.collect_statistics --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.default_permissions/", 
            "text": "rabbitmq.default_permissions\n\n\nDescription\n\n\nManages default_permissions settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nconf: The conf permission. Required.\n\n\nread: The read permission. Required.\n\n\nwrite: The write permission. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.default_permissions --conf \n.*\n --read \n.*\n --write \n.*", 
            "title": "rabbitmq.default_permissions"
        }, 
        {
            "location": "/resources/rabbitmq.default_permissions/#rabbitmqdefault_permissions", 
            "text": "", 
            "title": "rabbitmq.default_permissions"
        }, 
        {
            "location": "/resources/rabbitmq.default_permissions/#description", 
            "text": "Manages default_permissions settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.default_permissions/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  conf: The conf permission. Required.  read: The read permission. Required.  write: The write permission. Required.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.default_permissions/#example", 
            "text": "rabbitmq.default_permissions --conf  .*  --read  .*  --write  .*", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.default_user/", 
            "text": "rabbitmq.default_user\n\n\nDescription\n\n\nManages default_user settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The default user. Required. namevar.\n\n\npass: The default password. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.default_user --user guest --pass guest", 
            "title": "rabbitmq.default_user"
        }, 
        {
            "location": "/resources/rabbitmq.default_user/#rabbitmqdefault_user", 
            "text": "", 
            "title": "rabbitmq.default_user"
        }, 
        {
            "location": "/resources/rabbitmq.default_user/#description", 
            "text": "Manages default_user settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.default_user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The default user. Required. namevar.  pass: The default password. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.default_user/#example", 
            "text": "rabbitmq.default_user --user guest --pass guest", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.default_user_tags/", 
            "text": "rabbitmq.default_user_tags\n\n\nDescription\n\n\nManages default_user_tags settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ntag: The auth tag. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.default_user_tags --tag PLAIN", 
            "title": "rabbitmq.default_user_tags"
        }, 
        {
            "location": "/resources/rabbitmq.default_user_tags/#rabbitmqdefault_user_tags", 
            "text": "", 
            "title": "rabbitmq.default_user_tags"
        }, 
        {
            "location": "/resources/rabbitmq.default_user_tags/#description", 
            "text": "Manages default_user_tags settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.default_user_tags/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  tag: The auth tag. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.default_user_tags/#example", 
            "text": "rabbitmq.default_user_tags --tag PLAIN", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.default_vhost/", 
            "text": "rabbitmq.default_vhost\n\n\nDescription\n\n\nManages default_vhost settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvhost: The default vhost. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.default_vhost --vhost /", 
            "title": "rabbitmq.default_vhost"
        }, 
        {
            "location": "/resources/rabbitmq.default_vhost/#rabbitmqdefault_vhost", 
            "text": "", 
            "title": "rabbitmq.default_vhost"
        }, 
        {
            "location": "/resources/rabbitmq.default_vhost/#description", 
            "text": "Manages default_vhost settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.default_vhost/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  vhost: The default vhost. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.default_vhost/#example", 
            "text": "rabbitmq.default_vhost --vhost /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.delegate_count/", 
            "text": "rabbitmq.delegate_count\n\n\nDescription\n\n\nManages delegate_count settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.delegate_count --value /", 
            "title": "rabbitmq.delegate_count"
        }, 
        {
            "location": "/resources/rabbitmq.delegate_count/#rabbitmqdelegate_count", 
            "text": "", 
            "title": "rabbitmq.delegate_count"
        }, 
        {
            "location": "/resources/rabbitmq.delegate_count/#description", 
            "text": "Manages delegate_count settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.delegate_count/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.delegate_count/#example", 
            "text": "rabbitmq.delegate_count --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.disk_free_limit/", 
            "text": "rabbitmq.disk_free_limit\n\n\nDescription\n\n\nManages disk_free_limit settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nlimit_type: Whether mem_relative or absolute Required.\n\n\nvalue: The value of the limit_type. Required.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.disk_free_limit --limit_type mem_relative --value 1.0", 
            "title": "rabbitmq.disk_free_limit"
        }, 
        {
            "location": "/resources/rabbitmq.disk_free_limit/#rabbitmqdisk_free_limit", 
            "text": "", 
            "title": "rabbitmq.disk_free_limit"
        }, 
        {
            "location": "/resources/rabbitmq.disk_free_limit/#description", 
            "text": "Manages disk_free_limit settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.disk_free_limit/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  limit_type: Whether mem_relative or absolute Required.  value: The value of the limit_type. Required.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.disk_free_limit/#example", 
            "text": "rabbitmq.disk_free_limit --limit_type mem_relative --value 1.0", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.frame_max/", 
            "text": "rabbitmq.frame_max\n\n\nDescription\n\n\nManages frame_max settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.frame_max --value /", 
            "title": "rabbitmq.frame_max"
        }, 
        {
            "location": "/resources/rabbitmq.frame_max/#rabbitmqframe_max", 
            "text": "", 
            "title": "rabbitmq.frame_max"
        }, 
        {
            "location": "/resources/rabbitmq.frame_max/#description", 
            "text": "Manages frame_max settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.frame_max/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.frame_max/#example", 
            "text": "rabbitmq.frame_max --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.heartbeat/", 
            "text": "rabbitmq.heartbeat\n\n\nDescription\n\n\nManages heartbeat settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.heartbeat --value /", 
            "title": "rabbitmq.heartbeat"
        }, 
        {
            "location": "/resources/rabbitmq.heartbeat/#rabbitmqheartbeat", 
            "text": "", 
            "title": "rabbitmq.heartbeat"
        }, 
        {
            "location": "/resources/rabbitmq.heartbeat/#description", 
            "text": "Manages heartbeat settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.heartbeat/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.heartbeat/#example", 
            "text": "rabbitmq.heartbeat --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.hipe_compile/", 
            "text": "rabbitmq.hipe_compile\n\n\nDescription\n\n\nManages hipe_compile settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.hipe_compile --value /", 
            "title": "rabbitmq.hipe_compile"
        }, 
        {
            "location": "/resources/rabbitmq.hipe_compile/#rabbitmqhipe_compile", 
            "text": "", 
            "title": "rabbitmq.hipe_compile"
        }, 
        {
            "location": "/resources/rabbitmq.hipe_compile/#description", 
            "text": "Manages hipe_compile settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.hipe_compile/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.hipe_compile/#example", 
            "text": "rabbitmq.hipe_compile --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.log_levels/", 
            "text": "rabbitmq.log_levels\n\n\nDescription\n\n\nManages log_levels settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ncategory: The log category. Required. namevar.\n\n\nlevel: The log level. Optional. Defaults to info\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.log_levels --category connection --level debug\nrabbitmq.log_levels --category channel --level error", 
            "title": "rabbitmq.log_levels"
        }, 
        {
            "location": "/resources/rabbitmq.log_levels/#rabbitmqlog_levels", 
            "text": "", 
            "title": "rabbitmq.log_levels"
        }, 
        {
            "location": "/resources/rabbitmq.log_levels/#description", 
            "text": "Manages log_levels settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.log_levels/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  category: The log category. Required. namevar.  level: The log level. Optional. Defaults to info  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.log_levels/#example", 
            "text": "rabbitmq.log_levels --category connection --level debug\nrabbitmq.log_levels --category channel --level error", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_file_size_limit/", 
            "text": "rabbitmq.msg_store_file_size_limit\n\n\nDescription\n\n\nManages msg_store_file_size_limit settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.msg_store_file_size_limit --value /", 
            "title": "rabbitmq.msg_store_file_size_limit"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_file_size_limit/#rabbitmqmsg_store_file_size_limit", 
            "text": "", 
            "title": "rabbitmq.msg_store_file_size_limit"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_file_size_limit/#description", 
            "text": "Manages msg_store_file_size_limit settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_file_size_limit/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_file_size_limit/#example", 
            "text": "rabbitmq.msg_store_file_size_limit --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_index_module/", 
            "text": "rabbitmq.msg_store_index_module\n\n\nDescription\n\n\nManages msg_store_index_module settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.msg_store_index_module --value /", 
            "title": "rabbitmq.msg_store_index_module"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_index_module/#rabbitmqmsg_store_index_module", 
            "text": "", 
            "title": "rabbitmq.msg_store_index_module"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_index_module/#description", 
            "text": "Manages msg_store_index_module settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_index_module/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.msg_store_index_module/#example", 
            "text": "rabbitmq.msg_store_index_module --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.policy/", 
            "text": "rabbitmq.policy\n\n\nDescription\n\n\nManages RabbitMQ policies\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the policy. Required. namevar.\n\n\nvhost: The vhost to apply the policy to. Default: /.\n\n\nqueues: The queues to apply the policy to. Default: all.\n\n\npolicy: The policy. Required.\n\n\n\n\nExample\n\n\nrabbitmq.policy --name openstack-ha --vhost openstack --policy '{\nha-mode\n:\nall\n}'", 
            "title": "rabbitmq.policy"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#rabbitmqpolicy", 
            "text": "", 
            "title": "rabbitmq.policy"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#description", 
            "text": "Manages RabbitMQ policies", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the policy. Required. namevar.  vhost: The vhost to apply the policy to. Default: /.  queues: The queues to apply the policy to. Default: all.  policy: The policy. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#example", 
            "text": "rabbitmq.policy --name openstack-ha --vhost openstack --policy '{ ha-mode : all }'", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.queue_index_max_journal_entries/", 
            "text": "rabbitmq.queue_index_max_journal_entries\n\n\nDescription\n\n\nManages queue_index_max_journal_entries settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.queue_index_max_journal_entries --value /", 
            "title": "rabbitmq.queue_index_max_journal_entries"
        }, 
        {
            "location": "/resources/rabbitmq.queue_index_max_journal_entries/#rabbitmqqueue_index_max_journal_entries", 
            "text": "", 
            "title": "rabbitmq.queue_index_max_journal_entries"
        }, 
        {
            "location": "/resources/rabbitmq.queue_index_max_journal_entries/#description", 
            "text": "Manages queue_index_max_journal_entries settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.queue_index_max_journal_entries/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.queue_index_max_journal_entries/#example", 
            "text": "rabbitmq.queue_index_max_journal_entries --value /", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_listeners/", 
            "text": "rabbitmq.ssl_listeners\n\n\nDescription\n\n\nManages ssl_listeners settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nport: The port to listen on. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.ssl_listeners --port 5671", 
            "title": "rabbitmq.ssl_listeners"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_listeners/#rabbitmqssl_listeners", 
            "text": "", 
            "title": "rabbitmq.ssl_listeners"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_listeners/#description", 
            "text": "Manages ssl_listeners settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_listeners/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  port: The port to listen on. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_listeners/#example", 
            "text": "rabbitmq.ssl_listeners --port 5671", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_options/", 
            "text": "rabbitmq.ssl_options\n\n\nDescription\n\n\nManages ssl_options settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nkeyfile: The certificate key. Required.\n\n\ncertfile: The certificate. Required.\n\n\ncacertfile: The ca cert. Optional.\n\n\nverify: Verify the peer certificate. Optional.\n\n\nfail_if_no_peer_cert: Fail if no peer cert. Optional.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.ssl_options --certfile /path/to/server/cert.pem --keyfile /path/to/server/key.pem", 
            "title": "rabbitmq.ssl_options"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_options/#rabbitmqssl_options", 
            "text": "", 
            "title": "rabbitmq.ssl_options"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_options/#description", 
            "text": "Manages ssl_options settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_options/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  keyfile: The certificate key. Required.  certfile: The certificate. Required.  cacertfile: The ca cert. Optional.  verify: Verify the peer certificate. Optional.  fail_if_no_peer_cert: Fail if no peer cert. Optional.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.ssl_options/#example", 
            "text": "rabbitmq.ssl_options --certfile /path/to/server/cert.pem --keyfile /path/to/server/key.pem", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.tcp_listeners/", 
            "text": "rabbitmq.tcp_listeners\n\n\nDescription\n\n\nManages tcp_listeners settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\naddress: The address to listen on. Required. namevar.\n\n\nport: The port to listen on. Optional. Defaults to 5672.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.tcp_listeners --address 127.0.0.1 --port 5672\nrabbitmq.tcp_listeners --address ::1 --port 5672", 
            "title": "rabbitmq.tcp_listeners"
        }, 
        {
            "location": "/resources/rabbitmq.tcp_listeners/#rabbitmqtcp_listeners", 
            "text": "", 
            "title": "rabbitmq.tcp_listeners"
        }, 
        {
            "location": "/resources/rabbitmq.tcp_listeners/#description", 
            "text": "Manages tcp_listeners settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.tcp_listeners/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  address: The address to listen on. Required. namevar.  port: The port to listen on. Optional. Defaults to 5672.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.tcp_listeners/#example", 
            "text": "rabbitmq.tcp_listeners --address 127.0.0.1 --port 5672\nrabbitmq.tcp_listeners --address ::1 --port 5672", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/", 
            "text": "rabbitmq.user_permissions\n\n\nDescription\n\n\nManages RabbitMQ user permissions\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username@vhost of the rabbitmq user. Required. namevar.\n\n\nconf: The conf portion of the set_permissions command. Default: '.*'\n\n\nwrite: The write portion of the set_permissions command. Default: '.*'\n\n\nread: The read portion of the set_permissions command. Default: '.*'\n\n\n\n\nExample\n\n\nrabbitmq.user_permission --user_permission root --password password", 
            "title": "rabbitmq.user_permissions"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#rabbitmquser_permissions", 
            "text": "", 
            "title": "rabbitmq.user_permissions"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#description", 
            "text": "Manages RabbitMQ user permissions", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username@vhost of the rabbitmq user. Required. namevar.  conf: The conf portion of the set_permissions command. Default: '.*'  write: The write portion of the set_permissions command. Default: '.*'  read: The read portion of the set_permissions command. Default: '.*'", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#example", 
            "text": "rabbitmq.user_permission --user_permission root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.user/", 
            "text": "rabbitmq.user\n\n\nDescription\n\n\nManages RabbitMQ users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username of the rabbitmq user. Required. namevar.\n\n\npassword: The password of the rabbitmq user.\n\n\nadmin: Make the user an admin. Default: false.\n\n\n\n\nExample\n\n\nrabbitmq.user --user root --password password", 
            "title": "rabbitmq.user"
        }, 
        {
            "location": "/resources/rabbitmq.user/#rabbitmquser", 
            "text": "", 
            "title": "rabbitmq.user"
        }, 
        {
            "location": "/resources/rabbitmq.user/#description", 
            "text": "Manages RabbitMQ users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username of the rabbitmq user. Required. namevar.  password: The password of the rabbitmq user.  admin: Make the user an admin. Default: false.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.user/#example", 
            "text": "rabbitmq.user --user root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/", 
            "text": "rabbitmq.vhost\n\n\nDescription\n\n\nManages RabbitMQ vhosts\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvhost: The vhostname of the rabbitmq vhost. Required. namevar.\n\n\n\n\nExample\n\n\nrabbitmq.vhost --vhost openstack", 
            "title": "rabbitmq.vhost"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#rabbitmqvhost", 
            "text": "", 
            "title": "rabbitmq.vhost"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#description", 
            "text": "Manages RabbitMQ vhosts", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  vhost: The vhostname of the rabbitmq vhost. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#example", 
            "text": "rabbitmq.vhost --vhost openstack", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.vm_memory_high_watermark/", 
            "text": "rabbitmq.vm_memory_high_watermark\n\n\nDescription\n\n\nManages vm_memory_high_watermark settings in a rabbitmq.config file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvalue: The default value. Required. namevar.\n\n\nfile: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.\n\n\n\n\nExample\n\n\nrabbitmq.vm_memory_high_watermark --value /", 
            "title": "rabbitmq.vm_memory_high_watermark"
        }, 
        {
            "location": "/resources/rabbitmq.vm_memory_high_watermark/#rabbitmqvm_memory_high_watermark", 
            "text": "", 
            "title": "rabbitmq.vm_memory_high_watermark"
        }, 
        {
            "location": "/resources/rabbitmq.vm_memory_high_watermark/#description", 
            "text": "Manages vm_memory_high_watermark settings in a rabbitmq.config file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.vm_memory_high_watermark/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  value: The default value. Required. namevar.  file: The file to store the settings in. Optional. Defaults to /etc/rabbitmq/rabbitmq.config.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.vm_memory_high_watermark/#example", 
            "text": "rabbitmq.vm_memory_high_watermark --value /", 
            "title": "Example"
        }
    ]
}